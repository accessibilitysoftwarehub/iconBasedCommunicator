<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Octokit.Reactive</name>
    </assembly>
    <members>
        <member name="T:Octokit.Ensure">
            <summary>
              Ensure input parameters
            </summary>
        </member>
        <member name="M:Octokit.Ensure.ArgumentNotNull(System.Object,System.String)">
            <summary>
            Checks an argument to ensure it isn't null.
            </summary>
            <param name = "value">The argument value to check</param>
            <param name = "name">The name of the argument</param>
        </member>
        <member name="M:Octokit.Ensure.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
            Checks a string argument to ensure it isn't null or empty.
            </summary>
            <param name = "value">The argument value to check</param>
            <param name = "name">The name of the argument</param>
        </member>
        <member name="M:Octokit.Ensure.GreaterThanZero(System.TimeSpan,System.String)">
            <summary>
            Checks a timespan argument to ensure it is a positive value.
            </summary>
            <param name = "value">The argument value to check</param>
            <param name = "name">The name of the argument</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableMergingClient.Create(System.String,System.String,Octokit.NewMerge)">
            <summary>
            Create a merge for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/repos/merging/#perform-a-merge
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="merge">The merge to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOauthClient.GetGitHubLoginUrl(Octokit.OauthLoginRequest)">
            <summary>
            Gets the URL used in the first step of the web flow. The Web application should redirect to this URL.
            </summary>
            <param name="request">Parameters to the Oauth web flow login url</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOauthClient.CreateAccessToken(Octokit.OauthTokenRequest)">
            <summary>
            Makes a request to get an access token using the code returned when GitHub.com redirects back from the URL
            <see cref="M:Octokit.Reactive.IObservableOauthClient.GetGitHubLoginUrl(Octokit.OauthLoginRequest)">GitHub login url</see> to the application.
            </summary>
            <remarks>
            If the user accepts your request, GitHub redirects back to your site with a temporary code in a code
            parameter as well as the state you provided in the previous step in a state parameter. If the states donâ€™t
            match, the request has been created by a third party and the process should be aborted. Exchange this for
            an access token using this method.
            </remarks>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryCommitsClient.Compare(System.String,System.String,System.String,System.String)">
            <summary>
            Compare two references in a repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="base">The reference to use as the base commit</param>
            <param name="head">The reference to use as the head commit</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryCommitsClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets all commits for a given repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The reference for the commit</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryCommitsClient.GetAll(System.String,System.String)">
            <summary>
            Gets all commits for a given repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryCommitsClient.GetAll(System.String,System.String,Octokit.CommitRequest)">
            <summary>
            Gets all commits for a given repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="request">Used to filter list of commits returned</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryDeployKeysClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Get a single deploy key by number for a repository.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/repos/keys/#get"> API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
            <param name="number">The id of the deploy key.</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryDeployKeysClient.GetAll(System.String,System.String)">
            <summary>
            Get all deploy keys for a repository.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/repos/keys/#list"> API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryDeployKeysClient.Create(System.String,System.String,Octokit.NewDeployKey)">
            <summary>
            Creates a new deploy key for a repository.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/repos/keys/#create"> API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
            <param name="newDeployKey">The deploy key to create for the repository.</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryDeployKeysClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes a deploy key from a repository.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/repos/keys/#delete"> API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
            <param name="number">The id of the deploy key to delete.</param>
            <returns></returns>
        </member>
        <member name="T:Octokit.Reactive.IObservableUserKeysClient">
            <summary>
            A client for GitHub's User Keys API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/keys/">User Keys API documentation</a> for more information.
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.IObservableUserKeysClient.GetAll">
            <summary>
            Gets all public keys for the authenticated user.
            </summary>
            <remarks>
            https://developer.github.com/v3/users/keys/#list-your-public-keys
            </remarks>
            <returns>The <see cref="T:Octokit.PublicKey"/>s for the authenticated user.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableUserKeysClient.GetAll(System.String)">
            <summary>
            Gets all verified public keys for a user.
            </summary>
            <remarks>
            https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user
            </remarks>
            <returns>The <see cref="T:Octokit.PublicKey"/>s for the user.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMergingClient.Create(System.String,System.String,Octokit.NewMerge)">
            <summary>
            Create a merge for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/repos/merging/#perform-a-merge
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="merge">The merge to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryDeployKeysClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Get a single deploy key by number for a repository.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/repos/keys/#get"> API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
            <param name="number">The id of the deploy key.</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryDeployKeysClient.GetAll(System.String,System.String)">
            <summary>
            Get all deploy keys for a repository.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/repos/keys/#list"> API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryDeployKeysClient.Create(System.String,System.String,Octokit.NewDeployKey)">
            <summary>
            Creates a new deploy key for a repository.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/repos/keys/#create"> API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
            <param name="newDeployKey">The deploy key to create for the repository.</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryDeployKeysClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes a deploy key from a repository.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/repos/keys/#delete"> API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
            <param name="number">The id of the deploy key to delete.</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOauthClient.GetGitHubLoginUrl(Octokit.OauthLoginRequest)">
            <summary>
            Gets the URL used in the first step of the web flow. The Web application should redirect to this URL.
            </summary>
            <param name="request">Parameters to the Oauth web flow login url</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOauthClient.CreateAccessToken(Octokit.OauthTokenRequest)">
            <summary>
            Makes a request to get an access token using the code returned when GitHub.com redirects back from the URL
            <see cref="M:Octokit.Reactive.ObservableOauthClient.GetGitHubLoginUrl(Octokit.OauthLoginRequest)">GitHub login url</see> to the application.
            </summary>
            <remarks>
            If the user accepts your request, GitHub redirects back to your site with a temporary code in a code
            parameter as well as the state you provided in the previous step in a state parameter. If the states donâ€™t
            match, the request has been created by a third party and the process should be aborted. Exchange this for
            an access token using this method.
            </remarks>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:Octokit.Reactive.IObservableRepositoryContentsClient">
            <summary>
            Client for accessing contents of files within a repository as base64 encoded content.
            </summary>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.GetReadme(System.String,System.String)">
            <summary>
            Returns the HTML rendered README.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.GetReadmeHtml(System.String,System.String)">
            <summary>
            Returns just the HTML portion of the README without the surrounding HTML document. 
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.GetArchiveLink(System.String,System.String)">
            <summary>
            This method will return a 302 to a URL to download a tarball or zipball archive for a repository.
            Please make sure your HTTP framework is configured to follow redirects or you will need to use the 
            Location header to make a second GET request.
            Note: For private repositories, these links are temporary and expire quickly.
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.GetArchive(System.String,System.String)">
            <summary>
            Get an archive of a given repository's contents
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>A promise, containing the binary contents of the archive</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.GetArchiveLink(System.String,System.String,Octokit.ArchiveFormat)">
            <summary>
            This method will return a 302 to a URL to download a tarball or zipball archive for a repository.
            Please make sure your HTTP framework is configured to follow redirects or you will need to use the 
            Location header to make a second GET request.
            Note: For private repositories, these links are temporary and expire quickly.
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="archiveFormat">The format of the archive. Can be either tarball or zipball</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.GetArchive(System.String,System.String,Octokit.ArchiveFormat)">
            <summary>
            Get an archive of a given repository's contents, in a specific format
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="archiveFormat">The format of the archive. Can be either tarball or zipball</param>
            <returns>A promise, containing the binary contents of the archive</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.GetArchiveLink(System.String,System.String,Octokit.ArchiveFormat,System.String)">
            <summary>
            This method will return a 302 to a URL to download a tarball or zipball archive for a repository.
            Please make sure your HTTP framework is configured to follow redirects or you will need to use the 
            Location header to make a second GET request.
            Note: For private repositories, these links are temporary and expire quickly.
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="archiveFormat">The format of the archive. Can be either tarball or zipball</param>
            <param name="reference">A valid Git reference.</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.GetArchive(System.String,System.String,Octokit.ArchiveFormat,System.String)">
            <summary>
            Get an archive of a given repository's contents, using a specific format and reference
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="archiveFormat">The format of the archive. Can be either tarball or zipball</param>
            <param name="reference">A valid Git reference.</param>
            <returns>A promise, containing the binary contents of the archive</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.GetAllContents(System.String,System.String,System.String)">
            <summary>
            Returns the contents of a file or directory in a repository.
            </summary>
            <remarks>
            If given a path to a single file, this method returns a collection containing only that file.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="path">The content path</param>
            <returns>
            A collection of <see cref="T:Octokit.RepositoryContent"/> representing the content at the specified path
            </returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.GetAllContents(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the contents of a file or directory in a repository.
            </summary>
            <remarks>
            If given a path to a single file, this method returns a collection containing only that file.
            See the <a href="https://developer.github.com/v3/repos/contents/#get-contents">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="path">The content path</param>
            <param name="reference">The name of the commit/branch/tag. Default: the repositoryâ€™s default branch (usually master)</param>
            <returns>
            A collection of <see cref="T:Octokit.RepositoryContent"/> representing the content at the specified path
            </returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.CreateFile(System.String,System.String,System.String,Octokit.CreateFileRequest)">
            <summary>
            Creates a commit that creates a new file in a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="path">The path to the file</param>
            <param name="request">Information about the file to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.UpdateFile(System.String,System.String,System.String,Octokit.UpdateFileRequest)">
            <summary>
            Creates a commit that updates the contents of a file in a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="path">The path to the file</param>
            <param name="request">Information about the file to update</param>
            <returns>The updated content</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryContentsClient.DeleteFile(System.String,System.String,System.String,Octokit.DeleteFileRequest)">
            <summary>
            Creates a commit that deletes a file in a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="path">The path to the file</param>
            <param name="request">Information about the file to delete</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryCommentsClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single Repository Comment by number.
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#get-a-single-commit-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The comment id</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryCommentsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets Commit Comments for a repository.
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryCommentsClient.GetAllForCommit(System.String,System.String,System.String)">
            <summary>
            Gets Commit Comments for a specified Commit.
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#list-comments-for-a-single-commit</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="sha">The sha of the commit</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryCommentsClient.Create(System.String,System.String,System.String,Octokit.NewCommitComment)">
            <summary>
            Creates a new Commit Comment for a specified Commit.
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#create-a-commit-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="sha">The sha reference of commit</param>
            <param name="newCommitComment">The new comment to add to the commit</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryCommentsClient.Update(System.String,System.String,System.Int32,System.String)">
            <summary>
            Updates a specified Commit Comment.
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#update-a-commit-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The comment number</param>
            <param name="commentUpdate">The modified comment</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryCommentsClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes the specified Commit Comment
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#delete-a-commit-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The comment id</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryCommentsClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single Repository Comment by number.
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#get-a-single-commit-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The comment id</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryCommentsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets Commit Comments for a repository.
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#list-commit-comments-for-a-repository</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryCommentsClient.GetAllForCommit(System.String,System.String,System.String)">
            <summary>
            Gets Commit Comments for a specified Commit.
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#list-comments-for-a-single-commit</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="sha">The sha of the commit</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryCommentsClient.Create(System.String,System.String,System.String,Octokit.NewCommitComment)">
            <summary>
            Creates a new Commit Comment for a specified Commit.
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#create-a-commit-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="sha">The sha reference of commit</param>
            <param name="newCommitComment">The new comment to add to the commit</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryCommentsClient.Update(System.String,System.String,System.Int32,System.String)">
            <summary>
            Updates a specified Commit Comment.
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#update-a-commit-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The comment number</param>
            <param name="commentUpdate">The modified comment</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryCommentsClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes the specified Commit Comment
            </summary>
            <remarks>http://developer.github.com/v3/repos/comments/#delete-a-commit-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The comment id</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryHooksClient.GetAll(System.String,System.String)">
            <summary>
            Gets the list of hooks defined for a repository
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#list">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryHooksClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single hook defined for a repository by id
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#get-single-hook">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryHooksClient.Create(System.String,System.String,Octokit.NewRepositoryHook)">
            <summary>
            Creates a hook for a repository
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#create-a-hook">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryHooksClient.Edit(System.String,System.String,System.Int32,Octokit.EditRepositoryHook)">
            <summary>
            Edits a hook for a repository
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#edit-a-hook">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryHooksClient.Test(System.String,System.String,System.Int32)">
            <summary>
            Tests a hook for a repository
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#test-a-hook">API documentation</a> for more information. 
            This will trigger the hook with the latest push to the current repository if the hook is subscribed to push events. If the hook 
            is not subscribed to push events, the server will respond with 204 but no test POST will be generated.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryHooksClient.Ping(System.String,System.String,System.Int32)">
            <summary>
            This will trigger a ping event to be sent to the hook.
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#edit-a-hook">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryHooksClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes a hook for a repository
            </summary>
            <param name="owner"></param>
            <param name="repositoryName"></param>
            <param name="hookId"></param>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#delete-a-hook">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryForksClient.GetAll(System.String,System.String,Octokit.RepositoryForksListRequest)">
            <summary>
            Gets the list of forks defined for a repository
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/forks/#list-forks">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoryForksClient.Create(System.String,System.String,Octokit.NewRepositoryFork)">
            <summary>
            Creates a fork for a repository. Specify organization in the fork parameter to create for an organization.
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/forks/#create-a-fork">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableDeploymentsClient.GetAll(System.String,System.String)">
            <summary>
            Gets all the deployments for the specified repository. Any user with pull access
            to a repository can view deployments.
            </summary>
            <remarks>
            http://developer.github.com/v3/repos/deployments/#list-deployments
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All the <see cref="T:Octokit.Deployment"/>s for the specified repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableDeploymentsClient.Create(System.String,System.String,Octokit.NewDeployment)">
            <summary>
            Creates a new deployment for the specified repository.
            Users with push access can create a deployment for a given ref.
            </summary>
            <remarks>
            http://developer.github.com/v3/repos/deployments/#create-a-deployment
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newDeployment">A <see cref="T:Octokit.NewDeployment"/> instance describing the new deployment to create</param>
            <returns>The created <see cref="T:Octokit.Deployment"/></returns>
        </member>
        <member name="P:Octokit.Reactive.IObservableDeploymentsClient.Status">
            <summary>
            
            </summary>
        </member>
        <member name="M:Octokit.Reactive.IObservableDeploymentStatusClient.GetAll(System.String,System.String,System.Int32)">
            <summary>
            Gets all the statuses for the given deployment. Any user with pull access to a repository can
            view deployments.
            </summary>
            <remarks>
            http://developer.github.com/v3/repos/deployments/#list-deployment-statuses
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
            <param name="deploymentId">The id of the deployment.</param>
            <returns>All deployment statuses for the given deployment.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableDeploymentStatusClient.Create(System.String,System.String,System.Int32,Octokit.NewDeploymentStatus)">
            <summary>
            Creates a new status for the given deployment. Users with push access can create deployment
            statuses for a given deployment.
            </summary>
            <remarks>
            http://developer.github.com/v3/repos/deployments/#create-a-deployment-status
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
            <param name="deploymentId">The id of the deployment.</param>
            <param name="newDeploymentStatus">The new deployment status to create.</param>
            <returns></returns>
        </member>
        <member name="T:Octokit.Reactive.IObservableFeedsClient">
            <summary>
            A client for GitHub's Feeds API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/activity/feeds/">Feeds API documentation</a> for more information
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.IObservableFeedsClient.GetFeeds">
            <summary>
            Gets all the feeds available to the authenticating user
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/feeds/#list-feeds
            </remarks>
            <returns>All the public <see cref="T:Octokit.Feed"/>s for the particular user.</returns>
        </member>
        <member name="M:Octokit.Reactive.Clients.ObservableDeploymentsClient.GetAll(System.String,System.String)">
            <summary>
            Gets all the deployments for the specified repository. Any user with pull access
            to a repository can view deployments.
            </summary>
            <remarks>
            http://developer.github.com/v3/repos/deployments/#list-deployments
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All the <see cref="T:Octokit.Deployment"/>s for the specified repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.Clients.ObservableDeploymentsClient.Create(System.String,System.String,Octokit.NewDeployment)">
            <summary>
            Creates a new deployment for the specified repository.
            Users with push access can create a deployment for a given ref.
            </summary>
            <remarks>
            http://developer.github.com/v3/repos/deployments/#create-a-deployment
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newDeployment">A <see cref="T:Octokit.NewDeployment"/> instance describing the new deployment to create</param>
            <returns>The created <see cref="T:Octokit.Deployment"/></returns>
        </member>
        <member name="P:Octokit.Reactive.Clients.ObservableDeploymentsClient.Status">
            <summary>
            
            </summary>
        </member>
        <member name="M:Octokit.Reactive.Clients.ObservableDeploymentStatusClient.GetAll(System.String,System.String,System.Int32)">
            <summary>
            Gets all the statuses for the given deployment. Any user with pull access to a repository can
            view deployments.
            </summary>
            <remarks>
            http://developer.github.com/v3/repos/deployments/#list-deployment-statuses
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
            <param name="deploymentId">The id of the deployment.</param>
            <returns>All deployment statuses for the given deployment.</returns>
        </member>
        <member name="M:Octokit.Reactive.Clients.ObservableDeploymentStatusClient.Create(System.String,System.String,System.Int32,Octokit.NewDeploymentStatus)">
            <summary>
            Creates a new status for the given deployment. Users with push access can create deployment
            statuses for a given deployment.
            </summary>
            <remarks>
            http://developer.github.com/v3/repos/deployments/#create-a-deployment-status
            </remarks>
            <param name="owner">The owner of the repository.</param>
            <param name="name">The name of the repository.</param>
            <param name="deploymentId">The id of the deployment.</param>
            <param name="newDeploymentStatus">The new deployment status to create.</param>
            <returns></returns>
        </member>
        <member name="T:Octokit.Reactive.IObservableUserEmailsClient">
            <summary>
            A client for GitHub's User Emails API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/emails/">User Emails API documentation</a> for more information.
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.IObservableUserEmailsClient.GetAll">
            <summary>
            Gets all email addresses for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user
            </remarks>
            <returns>The <see cref="T:Octokit.EmailAddress"/>es for the authenticated user.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableUserEmailsClient.Add(System.String[])">
            <summary>
            Adds email addresses for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/users/emails/#add-email-addresses
            </remarks>
            <param name="emailAddresses">The email addresses to add.</param>
            <returns>Returns the added <see cref="T:Octokit.EmailAddress"/>es.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableUserEmailsClient.Delete(System.String[])">
            <summary>
            Deletes email addresses for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/users/emails/#delete-email-addresses
            </remarks>
            <param name="emailAddresses">The email addresses to delete.</param>
            <returns>Returns the added <see cref="T:Octokit.EmailAddress"/>es.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesLabelsClient.GetAllForIssue(System.String,System.String,System.Int32)">
            <summary>
            Gets all  labels for the issue.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#list-labels-on-an-issue">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <returns>The list of labels</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesLabelsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all  labels for the repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <returns>The list of labels</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesLabelsClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a single Label by name.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#get-a-single-label">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="name">The name of the label</param>
            <returns>The label</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesLabelsClient.Delete(System.String,System.String,System.String)">
            <summary>
            Deletes a label.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#delete-a-label">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="name">The name of the label</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesLabelsClient.Create(System.String,System.String,Octokit.NewLabel)">
            <summary>
            Creates a label.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#create-a-label">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="newLabel">The data for the label to be created</param>
            <returns>The created label</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesLabelsClient.Update(System.String,System.String,System.String,Octokit.LabelUpdate)">
            <summary>
            Updates a label.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#update-a-label">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="name">The name of the label</param>
            <param name="labelUpdate">The data for the label to be updated</param>
            <returns>The updated label</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesLabelsClient.AddToIssue(System.String,System.String,System.Int32,System.String[])">
            <summary>
            Adds a label to an issue
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#add-labels-to-an-issue">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <param name="labels">The names of the labels to add</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesLabelsClient.RemoveFromIssue(System.String,System.String,System.Int32,System.String)">
            <summary>
            Removes a label from an issue
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <param name="label">The name of the label to remove</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesLabelsClient.ReplaceAllForIssue(System.String,System.String,System.Int32,System.String[])">
            <summary>
            Replaces all labels on the specified issues with the provided labels
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <param name="labels">The names of the labels to set</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesLabelsClient.RemoveAllFromIssue(System.String,System.String,System.Int32)">
            <summary>
            Removes all labels from an issue
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesLabelsClient.GetAllForMilestone(System.String,System.String,System.Int32)">
            <summary>
            Gets labels for every issue in a milestone
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#get-labels-for-every-issue-in-a-milestone">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the milestone</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableWatchedClient.GetAllWatchers(System.String,System.String)">
            <summary>
            Retrieves all of the watchers for the passed repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s watching the passed repository</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableWatchedClient.GetAllForCurrent">
            <summary>
            Retrieves all of the watched <see cref="T:Octokit.Repository"/>(ies) for the current user
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.Repository"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableWatchedClient.GetAllForUser(System.String)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Repository"/>(ies) watched by the specified user
            </summary>
            <param name="user">The login of the user</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> watched by the specified user</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableWatchedClient.CheckWatched(System.String,System.String)">
            <summary>
            Check if a repository is watched by the current authenticated user
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <c>bool</c> representing the success of the operation</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableWatchedClient.WatchRepo(System.String,System.String,Octokit.NewSubscription)">
            <summary>
            Stars a repository for the authenticated user.
            </summary>
            <param name="owner">The owner of the repository to star</param>
            <param name="name">The name of the repository to star</param>
            <param name="newSubscription">A <see cref="T:Octokit.NewSubscription"/> instance describing the new subscription to create</param>
            <returns>A <c>bool</c> representing the success of starring</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableWatchedClient.UnwatchRepo(System.String,System.String)">
            <summary>
            Unstars a repository for the authenticated user.
            </summary>
            <param name="owner">The owner of the repository to unstar</param>
            <param name="name">The name of the repository to unstar</param>
            <returns>A <c>bool</c> representing the success of the operation</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableFollowersClient.GetAllForCurrent">
            <summary>
            List the authenticated userâ€™s followers
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#list-followers-of-a-user">API documentation</a> for more information.
            </remarks>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s that follow the authenticated user.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableFollowersClient.GetAll(System.String)">
            <summary>
            List a userâ€™s followers
            </summary>
            <param name="login">The login name for the user</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#list-followers-of-a-user">API documentation</a> for more information.
            </remarks>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s that follow the passed user.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableFollowersClient.GetAllFollowingForCurrent">
            <summary>
            List who the authenticated user is following
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#list-users-followed-by-another-user">API documentation</a> for more information.
            </remarks>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s that the authenticated user follows.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableFollowersClient.GetAllFollowing(System.String)">
            <summary>
            List who a user is following
            </summary>
            <param name="login">The login name of the user</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#list-users-followed-by-another-user">API documentation</a> for more information.
            </remarks>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s that the passed user follows.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableFollowersClient.IsFollowingForCurrent(System.String)">
            <summary>
            Check if the authenticated user follows another user
            </summary>
            <param name="following">The login name of the other user</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#check-if-you-are-following-a-user">API documentation</a> for more information.
            </remarks>
            <returns>A <c>bool</c> representing the success of the operation.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableFollowersClient.IsFollowing(System.String,System.String)">
            <summary>
            Check if one user follows another user
            </summary>
            <param name="login">The login name of the user</param>
            <param name="following">The login name of the other user</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#check-if-one-user-follows-another">API documentation</a> for more information.
            </remarks>
            <returns>A <c>bool</c> representing the success of the operation.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableFollowersClient.Follow(System.String)">
            <summary>
            Follow a user
            </summary>
            <param name="login">The login name of the user to follow</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#follow-a-user">API documentation</a> for more information.
            </remarks>
            <returns>A <c>bool</c> representing the success of the operation.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableFollowersClient.Unfollow(System.String)">
            <summary>
            Unfollow a user
            </summary>
            <param name="login">The login name of the user to unfollow</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#unfollow-a-user">API documentation</a> for more information.
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStatisticsClient.GetContributors(System.String,System.String)">
            <summary>
            Returns a list of <see cref="T:Octokit.Contributor"/> for the given repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <returns>A list of <see cref="T:Octokit.Contributor"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStatisticsClient.GetCommitActivity(System.String,System.String)">
            <summary>
            Returns the last year of commit activity grouped by week.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <returns>The last year of  <see cref="T:Octokit.CommitActivity"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStatisticsClient.GetCodeFrequency(System.String,System.String)">
            <summary>
            Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <returns>Returns a weekly aggregate of the number additions and deletion</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStatisticsClient.GetParticipation(System.String,System.String)">
            <summary>
            Returns the total commit counts for the owner and total commit counts in total. 
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <returns>Returns <see cref="T:Octokit.Participation"/>from oldest week to now</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStatisticsClient.GetPunchCard(System.String,System.String)">
            <summary>
            Returns a list of the number of commits per hour in each day
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <returns>Returns commit counts per hour in each day</returns>
        </member>
        <member name="T:Octokit.Reactive.ObservableFeedsClient">
            <summary>
            A client for GitHub's Feeds API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/activity/feeds/">Feeds API documentation</a> for more information
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.ObservableFeedsClient.GetFeeds">
            <summary>
            Gets all the feeds available to the authenticating user
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/feeds/#list-feeds
            </remarks>
            <returns>All the public <see cref="T:Octokit.Feed"/>s for the particular user.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesLabelsClient.GetAllForIssue(System.String,System.String,System.Int32)">
            <summary>
            Gets all  labels for the issue.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#list-labels-on-an-issue">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <returns>The list of labels</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesLabelsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all  labels for the repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#list-all-labels-for-this-repository">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <returns>The list of labels</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesLabelsClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a single Label by name.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#get-a-single-label">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="name">The name of the label</param>
            <returns>The label</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesLabelsClient.Delete(System.String,System.String,System.String)">
            <summary>
            Deletes a label.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#delete-a-label">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="name">The name of the label</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesLabelsClient.Create(System.String,System.String,Octokit.NewLabel)">
            <summary>
            Creates a label.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#create-a-label">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="newLabel">The data for the label to be created</param>
            <returns>The created label</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesLabelsClient.Update(System.String,System.String,System.String,Octokit.LabelUpdate)">
            <summary>
            Updates a label.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#update-a-label">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="name">The name of the label</param>
            <param name="labelUpdate">The data for the label to be updated</param>
            <returns>The updated label</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesLabelsClient.AddToIssue(System.String,System.String,System.Int32,System.String[])">
            <summary>
            Adds a label to an issue
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#add-labels-to-an-issue">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <param name="labels">The names of the labels to add</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesLabelsClient.RemoveFromIssue(System.String,System.String,System.Int32,System.String)">
            <summary>
            Removes a label from an issue
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#remove-a-label-from-an-issue">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <param name="label">The name of the label to remove</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesLabelsClient.ReplaceAllForIssue(System.String,System.String,System.Int32,System.String[])">
            <summary>
            Replaces all labels on the specified issues with the provided labels
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#replace-all-labels-for-an-issue">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <param name="labels">The names of the labels to set</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesLabelsClient.RemoveAllFromIssue(System.String,System.String,System.Int32)">
            <summary>
            Removes all labels from an issue
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#remove-all-labels-from-an-issue">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesLabelsClient.GetAllForMilestone(System.String,System.String,System.Int32)">
            <summary>
            Gets labels for every issue in a milestone
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/issues/labels/#get-labels-for-every-issue-in-a-milestone">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="number">The number of the milestone</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryCommitsClient.Compare(System.String,System.String,System.String,System.String)">
            <summary>
            Compare two references in a repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="base">The reference to use as the base commit</param>
            <param name="head">The reference to use as the head commit</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryCommitsClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets all commits for a given repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The reference for the commit</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryCommitsClient.GetAll(System.String,System.String)">
            <summary>
            Gets all commits for a given repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryCommitsClient.GetAll(System.String,System.String,Octokit.CommitRequest)">
            <summary>
            Gets all commits for a given repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="request">Used to filter list of commits returned</param>
            <returns></returns>
        </member>
        <member name="T:Octokit.Reactive.ObservableRepositoryContentsClient">
            <summary>
            Client for accessing contents of files within a repository as base64 encoded content.
            </summary>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.#ctor(Octokit.IGitHubClient)">
            <summary>
            Creates an instance of <see cref="T:Octokit.Reactive.ObservableRepositoryContentsClient"/>.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.GetReadme(System.String,System.String)">
            <summary>
            Returns the HTML rendered README.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.GetReadmeHtml(System.String,System.String)">
            <summary>
            Returns just the HTML portion of the README without the surrounding HTML document. 
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.GetArchiveLink(System.String,System.String)">
            <summary>
            This method will return a 302 to a URL to download a tarball or zipball archive for a repository.
            Please make sure your HTTP framework is configured to follow redirects or you will need to use the 
            Location header to make a second GET request.
            Note: For private repositories, these links are temporary and expire quickly.
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.GetArchive(System.String,System.String)">
            <summary>
            Get an archive of a given repository's contents
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>A promise, containing the binary contents of the archive</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.GetArchiveLink(System.String,System.String,Octokit.ArchiveFormat)">
            <summary>
            This method will return a 302 to a URL to download a tarball or zipball archive for a repository.
            Please make sure your HTTP framework is configured to follow redirects or you will need to use the 
            Location header to make a second GET request.
            Note: For private repositories, these links are temporary and expire quickly.
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="archiveFormat">The format of the archive. Can be either tarball or zipball</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.GetArchive(System.String,System.String,Octokit.ArchiveFormat)">
            <summary>
            Get an archive of a given repository's contents, in a specific format
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="archiveFormat">The format of the archive. Can be either tarball or zipball</param>
            <returns>A promise, containing the binary contents of the archive</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.GetArchiveLink(System.String,System.String,Octokit.ArchiveFormat,System.String)">
            <summary>
            This method will return a 302 to a URL to download a tarball or zipball archive for a repository.
            Please make sure your HTTP framework is configured to follow redirects or you will need to use the 
            Location header to make a second GET request.
            Note: For private repositories, these links are temporary and expire quickly.
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="archiveFormat">The format of the archive. Can be either tarball or zipball</param>
            <param name="reference">A valid Git reference.</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.GetArchive(System.String,System.String,Octokit.ArchiveFormat,System.String)">
            <summary>
            Get an archive of a given repository's contents, using a specific format and reference
            </summary>
            <remarks>https://developer.github.com/v3/repos/contents/#get-archive-link</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="archiveFormat">The format of the archive. Can be either tarball or zipball</param>
            <param name="reference">A valid Git reference.</param>
            <returns>A promise, containing the binary contents of the archive</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.GetAllContents(System.String,System.String,System.String)">
            <summary>
            Returns the contents of a file or directory in a repository.
            </summary>
            <remarks>
            If given a path to a single file, this method returns a collection containing only that file.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="path">The content path</param>
            <returns>
            A collection of <see cref="T:Octokit.RepositoryContent"/> representing the content at the specified path
            </returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.GetAllContents(System.String,System.String,System.String,System.String)">
            <summary>
            Returns the contents of a file or directory in a repository.
            </summary>
            <remarks>
            If given a path to a single file, this method returns a collection containing only that file.
            See the <a href="https://developer.github.com/v3/repos/contents/#get-contents">API documentation</a> for more information.
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="path">The content path</param>
            <param name="reference">The name of the commit/branch/tag. Default: the repositoryâ€™s default branch (usually master)</param>
            <returns>
            A collection of <see cref="T:Octokit.RepositoryContent"/> representing the content at the specified path
            </returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.CreateFile(System.String,System.String,System.String,Octokit.CreateFileRequest)">
            <summary>
            Creates a commit that creates a new file in a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="path">The path to the file</param>
            <param name="request">Information about the file to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryContentsClient.UpdateFile(System.String,System.String,System.String,Octokit.UpdateFileRequest)">
            <summary>
            Creates a commit that updates the contents of a file in a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="path">The path to the file</param>
            <param name="request">Information about the file to update</param>
            <returns>The updated content</returns>
        </member>
        <member name="T:Octokit.Reactive.ObservableSearchClient">
            <summary>
            GitHub Search Api Client
            </summary>
        </member>
        <member name="T:Octokit.Reactive.IObservableSearchClient">
            <summary>
            GitHub Search Api Client
            </summary>
        </member>
        <member name="M:Octokit.Reactive.IObservableSearchClient.SearchRepo(Octokit.SearchRepositoriesRequest)">
            <summary>
            search repos
            http://developer.github.com/v3/search/#search-repositories
            </summary>
            <param name="search"></param>
            <returns>List of repositories</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableSearchClient.SearchUsers(Octokit.SearchUsersRequest)">
            <summary>
            search users
            http://developer.github.com/v3/search/#search-users
            </summary>
            <param name="search"></param>
            <returns>List of users</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableSearchClient.SearchIssues(Octokit.SearchIssuesRequest)">
            <summary>
            search issues
            http://developer.github.com/v3/search/#search-issues
            </summary>
            <param name="search"></param>
            <returns>List of issues</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableSearchClient.SearchCode(Octokit.SearchCodeRequest)">
            <summary>
            search code
            http://developer.github.com/v3/search/#search-code
            </summary>
            <param name="search"></param>
            <returns>List of files</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableSearchClient.SearchRepo(Octokit.SearchRepositoriesRequest)">
            <summary>
            search repos
            http://developer.github.com/v3/search/#search-repositories
            </summary>
            <param name="search"></param>
            <returns>List of repositories</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableSearchClient.SearchUsers(Octokit.SearchUsersRequest)">
            <summary>
            search users
            http://developer.github.com/v3/search/#search-users
            </summary>
            <param name="search"></param>
            <returns>List of users</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableSearchClient.SearchIssues(Octokit.SearchIssuesRequest)">
            <summary>
            search issues
            http://developer.github.com/v3/search/#search-issues
            </summary>
            <param name="search"></param>
            <returns>List of issues</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableSearchClient.SearchCode(Octokit.SearchCodeRequest)">
            <summary>
            search code
            http://developer.github.com/v3/search/#search-code
            </summary>
            <param name="search"></param>
            <returns>List of files</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableBlobsClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a single Blob by SHA.
            </summary>
            <remarks>
            http://developer.github.com/v3/git/blobs/#get-a-blob
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The SHA of the blob</param>
            <returns>The <see cref="T:Octokit.Blob"/> for the specified SHA.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableBlobsClient.Create(System.String,System.String,Octokit.NewBlob)">
            <summary>
            Creates a new Blob
            </summary>
            <remarks>
            http://developer.github.com/v3/git/blobs/#create-a-blob
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newBlob">The new Blob</param>
            <returns>The <see cref="T:Octokit.Blob"/> that was just created.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistCommentsClient.Get(System.String,System.Int32)">
            <summary>
            Gets a single comment by gist- and comment id.
            </summary>
            <remarks>http://developer.github.com/v3/gists/comments/#get-a-single-comment</remarks>
            <param name="gistId">The id of the gist</param>
            <param name="commentId">The id of the comment</param>
            <returns>IObservable{GistComment}.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistCommentsClient.GetAllForGist(System.String)">
            <summary>
            Gets all comments for the gist with the specified id.
            </summary>
            <remarks>http://developer.github.com/v3/gists/comments/#list-comments-on-a-gist</remarks>
            <param name="gistId">The id of the gist</param>
            <returns>IObservable{GistComment}.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistCommentsClient.Create(System.String,System.String)">
            <summary>
            Creates a comment for the gist with the specified id.
            </summary>
            <remarks>http://developer.github.com/v3/gists/comments/#create-a-comment</remarks>
            <param name="gistId">The id of the gist</param>
            <param name="comment">The body of the comment</param>
            <returns>IObservable{GistComment}.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistCommentsClient.Update(System.String,System.Int32,System.String)">
            <summary>
            Updates the comment with the specified gist- and comment id.
            </summary>
            <remarks>http://developer.github.com/v3/gists/comments/#edit-a-comment</remarks>
            <param name="gistId">The id of the gist</param>
            <param name="commentId">The id of the comment</param>
            <param name="comment">The updated body of the comment</param>
            <returns>IObservable{GistComment}.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistCommentsClient.Delete(System.String,System.Int32)">
            <summary>
            Deletes the comment with the specified gist- and comment id.
            </summary>
            <remarks>http://developer.github.com/v3/gists/comments/#delete-a-comment</remarks>
            <param name="gistId">The id of the gist</param>
            <param name="commentId">The id of the comment</param>
            <returns>IObservable{Unit}.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.Get(System.String)">
            <summary>
            Gets a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#get-a-single-gist
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.GetAll">
            <summary>
            List the authenticated userâ€™s gists or if called anonymously, 
            this will return all public gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.GetAll(System.DateTimeOffset)">
            <summary>
            List the authenticated userâ€™s gists or if called anonymously, 
            this will return all public gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
            <param name="since">Only gists updated at or after this time are returned</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.GetAllPublic">
            <summary>
            Lists all public gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.GetAllPublic(System.DateTimeOffset)">
            <summary>
            Lists all public gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
            <param name="since">Only gists updated at or after this time are returned</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.GetAllStarred">
            <summary>
            List the authenticated userâ€™s starred gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.GetAllStarred(System.DateTimeOffset)">
            <summary>
            List the authenticated userâ€™s starred gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
            <param name="since">Only gists updated at or after this time are returned</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.GetAllForUser(System.String)">
            <summary>
            List a user's gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
            <param name="user">The user</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.GetAllForUser(System.String,System.DateTimeOffset)">
            <summary>
            List a user's gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
            <param name="user">The user</param>
            <param name="since">Only gists updated at or after this time are returned</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.GetAllCommits(System.String)">
            <summary>
            List gist commits
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists-commits
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.GetAllForks(System.String)">
            <summary>
            List gist forks
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists-forks
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.Create(Octokit.NewGist)">
            <summary>
            Creates a new gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#create-a-gist
            </remarks>
            <param name="newGist">The new gist to create</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.Fork(System.String)">
            <summary>
            Creates a fork of a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#fork-a-gist
            </remarks>
            <param name="id">The id of the gist to fork</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.Edit(System.String,Octokit.GistUpdate)">
            <summary>
            Edits a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#delete-a-gist
            </remarks>
            <param name="id">The id of the gist</param>
            <param name="gistUpdate">The update to the gist</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.Delete(System.String)">
            <summary>
            Deletes a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#delete-a-gist
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.Star(System.String)">
            <summary>
            Stars a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#star-a-gist
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.Unstar(System.String)">
            <summary>
            Unstars a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#unstar-a-gist
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableGistsClient.IsStarred(System.String)">
            <summary>
            Checks if the gist is starred
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#check-if-a-gist-is-starred
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableReferencesClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a reference for a given repository by reference name
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#get-a-reference
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The name of the reference</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReferencesClient.GetAll(System.String,System.String)">
            <summary>
            Gets all references for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#get-all-references
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReferencesClient.GetAllForSubNamespace(System.String,System.String,System.String)">
            <summary>
            Gets references for a given repository by sub-namespace, i.e. "tags" or "heads"
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#get-all-references
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="subNamespace">The sub-namespace to get references for</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReferencesClient.Create(System.String,System.String,Octokit.NewReference)">
            <summary>
            Creates a reference for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#create-a-reference
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The reference to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReferencesClient.Update(System.String,System.String,System.String,Octokit.ReferenceUpdate)">
            <summary>
            Updates a reference for a given repository by reference name
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#update-a-reference
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The name of the reference</param>
            <param name="referenceUpdate">The updated reference data</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReferencesClient.Delete(System.String,System.String,System.String)">
            <summary>
            Deletes a reference for a given repository by reference name
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#delete-a-reference
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The name of the reference</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistCommentsClient.Get(System.String,System.Int32)">
            <summary>
            Gets a single comment by gist- and comment id.
            </summary>
            <remarks>http://developer.github.com/v3/gists/comments/#get-a-single-comment</remarks>
            <param name="gistId">The id of the gist</param>
            <param name="commentId">The id of the comment</param>
            <returns>IObservable{GistComment}.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistCommentsClient.GetAllForGist(System.String)">
            <summary>
            Gets all comments for the gist with the specified id.
            </summary>
            <remarks>http://developer.github.com/v3/gists/comments/#list-comments-on-a-gist</remarks>
            <param name="gistId">The id of the gist</param>
            <returns>IObservable{GistComment}.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistCommentsClient.Create(System.String,System.String)">
            <summary>
            Creates a comment for the gist with the specified id.
            </summary>
            <remarks>http://developer.github.com/v3/gists/comments/#create-a-comment</remarks>
            <param name="gistId">The id of the gist</param>
            <param name="comment">The body of the comment</param>
            <returns>IObservable{GistComment}.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistCommentsClient.Update(System.String,System.Int32,System.String)">
            <summary>
            Updates the comment with the specified gist- and comment id.
            </summary>
            <remarks>http://developer.github.com/v3/gists/comments/#edit-a-comment</remarks>
            <param name="gistId">The id of the gist</param>
            <param name="commentId">The id of the comment</param>
            <param name="comment">The updated body of the comment</param>
            <returns>IObservable{GistComment}.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistCommentsClient.Delete(System.String,System.Int32)">
            <summary>
            Deletes the comment with the specified gist- and comment id.
            </summary>
            <remarks>http://developer.github.com/v3/gists/comments/#delete-a-comment</remarks>
            <param name="gistId">The id of the gist</param>
            <param name="commentId">The id of the comment</param>
            <returns>IObservable{Unit}.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.Get(System.String)">
            <summary>
            Gets a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#get-a-single-gist
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.Create(Octokit.NewGist)">
            <summary>
            Creates a new gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#create-a-gist
            </remarks>
            <param name="newGist">The new gist to create</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.Fork(System.String)">
            <summary>
            Creates a fork of a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#fork-a-gist
            </remarks>
            <param name="id">The id of the gist to fork</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.Delete(System.String)">
            <summary>
            Deletes a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#delete-a-gist
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.GetAll">
            <summary>
            List the authenticated userâ€™s gists or if called anonymously, 
            this will return all public gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.GetAll(System.DateTimeOffset)">
            <summary>
            List the authenticated userâ€™s gists or if called anonymously, 
            this will return all public gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
            <param name="since">Only gists updated at or after this time are returned</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.GetAllPublic">
            <summary>
            Lists all public gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.GetAllPublic(System.DateTimeOffset)">
            <summary>
            Lists all public gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
            <param name="since">Only gists updated at or after this time are returned</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.GetAllStarred">
            <summary>
            List the authenticated userâ€™s starred gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.GetAllStarred(System.DateTimeOffset)">
            <summary>
            List the authenticated userâ€™s starred gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
            <param name="since">Only gists updated at or after this time are returned</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.GetAllForUser(System.String)">
            <summary>
            List a user's gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
            <param name="user">The user</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.GetAllForUser(System.String,System.DateTimeOffset)">
            <summary>
            List a user's gists
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists
            </remarks>
            <param name="user">The user</param>
            <param name="since">Only gists updated at or after this time are returned</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.GetAllCommits(System.String)">
            <summary>
            List gist commits
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists-commits
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.GetAllForks(System.String)">
            <summary>
            List gist forks
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#list-gists-forks
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.Edit(System.String,Octokit.GistUpdate)">
            <summary>
            Edits a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#delete-a-gist
            </remarks>
            <param name="id">The id of the gist</param>
            <param name="gistUpdate">The update to the gist</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.Star(System.String)">
            <summary>
            Stars a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#star-a-gist
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.Unstar(System.String)">
            <summary>
            Unstars a gist
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#unstar-a-gist
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableGistsClient.IsStarred(System.String)">
            <summary>
            Checks if the gist is starred
            </summary>
            <remarks>
            http://developer.github.com/v3/gists/#check-if-a-gist-is-starred
            </remarks>
            <param name="id">The id of the gist</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableReferencesClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a reference for a given repository by reference name
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#get-a-reference
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The name of the reference</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReferencesClient.GetAll(System.String,System.String)">
            <summary>
            Gets all references for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#get-all-references
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReferencesClient.GetAllForSubNamespace(System.String,System.String,System.String)">
            <summary>
            Gets references for a given repository by sub-namespace, i.e. "tags" or "heads"
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#get-all-references
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="subNamespace">The sub-namespace to get references for</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReferencesClient.Create(System.String,System.String,Octokit.NewReference)">
            <summary>
            Creates a reference for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#create-a-reference
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The reference to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReferencesClient.Update(System.String,System.String,System.String,Octokit.ReferenceUpdate)">
            <summary>
            Updates a reference for a given repository by reference name
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#update-a-reference
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The name of the reference</param>
            <param name="referenceUpdate">The updated reference data</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReferencesClient.Delete(System.String,System.String,System.String)">
            <summary>
            Deletes a reference for a given repository by reference name
            </summary>
            <remarks>
            http://developer.github.com/v3/git/refs/#delete-a-reference
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The name of the reference</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepoCollaboratorsClient.GetAll(System.String,System.String)">
            <summary>
            Gets all the available collaborators on this repo.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepoCollaboratorsClient.IsCollaborator(System.String,System.String,System.String)">
            <summary>
            Checks to see if a user is an assignee for a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="user">Username of the prospective collaborator</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepoCollaboratorsClient.Add(System.String,System.String,System.String)">
            <summary>
            Adds a user as a collaborator to a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="user">Username of the prospective collaborator</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepoCollaboratorsClient.Delete(System.String,System.String,System.String)">
            <summary>
            Removes a user as a collaborator for a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="user">Username of the prospective collaborator</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepoCollaboratorsClient.GetAll(System.String,System.String)">
            <summary>
            Gets all the available collaborators on this repo.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepoCollaboratorsClient.IsCollaborator(System.String,System.String,System.String)">
            <summary>
            Checks to see if a user is an assignee for a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="user">Username of the prospective collaborator</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepoCollaboratorsClient.Add(System.String,System.String,System.String)">
            <summary>
            Adds a user as a collaborator to a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="user">Username of the prospective collaborator</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepoCollaboratorsClient.Delete(System.String,System.String,System.String)">
            <summary>
            Removes a user as a collaborator for a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repo">The name of the repository</param>
            <param name="user">Username of the prospective collaborator</param>
            <returns></returns>
        </member>
        <member name="T:Octokit.Reactive.ObservableTeamsClient">
            <summary>
            A client for GitHub's Org Teams API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/teams/">Orgs API documentation</a> for more information.
            </remarks>
        </member>
        <member name="T:Octokit.Reactive.IObservableTeamsClient">
            <summary>
            A client for GitHub's Org Teams API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/teams/">Orgs API documentation</a> for more information.
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.Get(System.Int32)">
            <summary>
            Gets a single <see cref="T:Octokit.Team"/> by identifier.
            </summary>
            <remarks>
            https://developer.github.com/v3/orgs/teams/#get-team
            </remarks>
            <param name="id">The team identifier.</param>
            <returns>The <see cref="T:Octokit.Team"/> with the given identifier.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.GetAll(System.String)">
            <summary>
            Returns all <see cref="T:Octokit.Team"/>s for the current org.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>A list of the orgs's teams <see cref="T:Octokit.Team"/>s.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.GetAllForCurrent">
            <summary>
            Returns all <see cref="T:Octokit.Team"/>s for the current user.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>A list of the user's <see cref="T:Octokit.Team"/>s.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.GetAllMembers(System.Int32)">
            <summary>
            Returns all members of the given team. 
            </summary>
            <param name="id">The team identifier</param>
            <remarks>
            https://developer.github.com/v3/orgs/teams/#list-team-members
            </remarks>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>A list of the team's member <see cref="T:Octokit.User"/>s.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.Create(System.String,Octokit.NewTeam)">
            <summary>
            Returns newly created <see cref="T:Octokit.Team"/> for the current org.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>Newly created <see cref="T:Octokit.Team"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.Update(System.Int32,Octokit.UpdateTeam)">
            <summary>
            Returns updated <see cref="T:Octokit.Team"/> for the current org.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>Updated <see cref="T:Octokit.Team"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.Delete(System.Int32)">
            <summary>
            Delete a team - must have owner permissions to this
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.AddMembership(System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:Octokit.User"/> to a <see cref="T:Octokit.Team"/>.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/orgs/teams/#add-team-member">API documentation</a> for more information.
            </remarks>
            <param name="id">The team identifier.</param>
            <param name="login">The user to add to the team.</param>
            <exception cref="T:Octokit.ApiValidationException">Thrown if you attempt to add an organization to a team.</exception>
            <returns>A <see cref="T:Octokit.TeamMembership"/> result indicating the membership status</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.RemoveMembership(System.Int32,System.String)">
            <summary>
            Removes a <see cref="T:Octokit.User"/> from a <see cref="T:Octokit.Team"/>.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/orgs/teams/#remove-team-member">API documentation</a> for more information.
            </remarks>
            <param name="id">The team identifier.</param>
            <param name="login">The user to remove from the team.</param>
            <returns><see langword="true"/> if the user was removed from the team; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.IsMember(System.Int32,System.String)">
            <summary>
            Gets whether the user with the given <paramref name="login"/> 
            is a member of the team with the given <paramref name="id"/>.
            </summary>
            <param name="id">The team to check.</param>
            <param name="login">The user to check.</param>
            <returns><see langword="true"/> if the user is a member of the team; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.GetMembership(System.Int32,System.String)">
            <summary>
            Gets whether the user with the given <paramref name="login"/> 
            is a member of the team with the given <paramref name="id"/>.
            </summary>
            <param name="id">The team to check.</param>
            <param name="login">The user to check.</param>
            <returns>A <see cref="T:Octokit.TeamMembership"/> result indicating the membership status</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.GetAllRepositories(System.Int32)">
            <summary>
            Returns all team's repositories.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The team's repositories</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.RemoveRepository(System.Int32,System.String,System.String)">
            <summary>
            Remove a repository from the team
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.AddRepository(System.Int32,System.String,System.String)">
            <summary>
            Adds a <see cref="T:Octokit.Repository"/> to a <see cref="T:Octokit.Team"/>.
            </summary>
            <param name="id">The team identifier.</param>
            <param name="organization">Org to associate the repo with.</param>
            <param name="repoName">Name of the repo.</param>
            <exception cref="T:Octokit.ApiValidationException">Thrown if you attempt to add a repository to a team that is not owned by the organization.</exception>
            <remarks>
            See the <a href="https://developer.github.com/v3/orgs/teams/#add-team-repo">API documentation</a> for more information.
            </remarks>
            <returns><see langword="true"/> if the repository was added to the team; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTeamsClient.IsRepositoryManagedByTeam(System.Int32,System.String,System.String)">
            <summary>
            Gets whether or not the given repository is managed by the given team.
            </summary>
            <param name="id">The team identifier</param>
            <param name="owner">Owner of the org the team is associated with.</param>
            <param name="repo">Name of the repo.</param>
            <remarks>
            See the <a href="https://developer.github.com/v3/orgs/teams/#get-team-repo">API documentation</a> for more information.
            </remarks>
            <returns><see langword="true"/> if the repository is managed by the given team; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.#ctor(Octokit.IGitHubClient)">
            <summary>
            Initializes a new Organization Teams API client.
            </summary>
            <param name="client">An <see cref="T:Octokit.IGitHubClient"/> used to make the requests</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.Get(System.Int32)">
            <summary>
            Gets a single <see cref="T:Octokit.Team"/> by identifier.
            </summary>
            <remarks>
            https://developer.github.com/v3/orgs/teams/#get-team
            </remarks>
            <param name="id">The team identifier.</param>
            <returns>The <see cref="T:Octokit.Team"/> with the given identifier.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.GetAll(System.String)">
            <summary>
            Returns all <see cref="T:Octokit.Team"/>s for the current org.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>A list of the orgs's teams <see cref="T:Octokit.Team"/>s.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.GetAllForCurrent">
            <summary>
            Returns all <see cref="T:Octokit.Team"/>s for the current user.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>A list of the user's <see cref="T:Octokit.Team"/>s.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.GetAllMembers(System.Int32)">
            <summary>
            Returns all members of the given team. 
            </summary>
            <param name="id">The team identifier</param>
            <remarks>
            https://developer.github.com/v3/orgs/teams/#list-team-members
            </remarks>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>A list of the team's member <see cref="T:Octokit.User"/>s.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.Create(System.String,Octokit.NewTeam)">
            <summary>
            Returns newly created <see cref="T:Octokit.Team"/> for the current org.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>Newly created <see cref="T:Octokit.Team"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.Update(System.Int32,Octokit.UpdateTeam)">
            <summary>
            Returns updated <see cref="T:Octokit.Team"/> for the current org.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>Updated <see cref="T:Octokit.Team"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.Delete(System.Int32)">
            <summary>
            Delete a team - must have owner permissions to this
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.AddMembership(System.Int32,System.String)">
            <summary>
            Adds a <see cref="T:Octokit.User"/> to a <see cref="T:Octokit.Team"/>.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/orgs/teams/#add-team-member">API documentation</a> for more information.
            </remarks>
            <param name="id">The team identifier.</param>
            <param name="login">The user to add to the team.</param>
            <exception cref="T:Octokit.ApiValidationException">Thrown if you attempt to add an organization to a team.</exception>
            <returns>A <see cref="T:Octokit.TeamMembership"/> result indicating the membership status</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.RemoveMembership(System.Int32,System.String)">
            <summary>
            Removes a <see cref="T:Octokit.User"/> from a <see cref="T:Octokit.Team"/>.
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/orgs/teams/#remove-team-member">API documentation</a> for more information.
            </remarks>
            <param name="id">The team identifier.</param>
            <param name="login">The user to remove from the team.</param>
            <returns><see langword="true"/> if the user was removed from the team; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.IsMember(System.Int32,System.String)">
            <summary>
            Gets whether the user with the given <paramref name="login"/> 
            is a member of the team with the given <paramref name="id"/>.
            </summary>
            <param name="id">The team to check.</param>
            <param name="login">The user to check.</param>
            <returns><see langword="true"/> if the user is a member of the team; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.GetMembership(System.Int32,System.String)">
            <summary>
            Gets whether the user with the given <paramref name="login"/> 
            is a member of the team with the given <paramref name="id"/>.
            </summary>
            <param name="id">The team to check.</param>
            <param name="login">The user to check.</param>
            <returns>A <see cref="T:Octokit.TeamMembership"/> result indicating the membership status</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.GetAllRepositories(System.Int32)">
            <summary>
            Returns all team's repositories.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The team's repositories</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.AddRepository(System.Int32,System.String,System.String)">
            <summary>
            Adds a <see cref="T:Octokit.Repository"/> to a <see cref="T:Octokit.Team"/>.
            </summary>
            <param name="id">The team identifier.</param>
            <param name="organization">Org to associate the repo with.</param>
            <param name="repoName">Name of the repo.</param>
            <exception cref="T:Octokit.ApiValidationException">Thrown if you attempt to add a repository to a team that is not owned by the organization.</exception>
            <remarks>
            See the <a href="https://developer.github.com/v3/orgs/teams/#add-team-repo">API documentation</a> for more information.
            </remarks>
            <returns><see langword="true"/> if the repository was added to the team; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.RemoveRepository(System.Int32,System.String,System.String)">
            <summary>
            Remove a repository from the team
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTeamsClient.IsRepositoryManagedByTeam(System.Int32,System.String,System.String)">
            <summary>
            Gets whether or not the given repository is managed by the given team.
            </summary>
            <param name="id">The team identifier</param>
            <param name="owner">Owner of the org the team is associated with.</param>
            <param name="repo">Name of the repo.</param>
            <remarks>
            See the <a href="https://developer.github.com/v3/orgs/teams/#get-team-repo">API documentation</a> for more information.
            </remarks>
            <returns><see langword="true"/> if the repository is managed by the given team; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableCommitsClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a commit for a given repository by sha reference
            </summary>
            <remarks>
            http://developer.github.com/v3/git/commits/#get-a-commit
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">Tha sha reference of the commit</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableCommitsClient.Create(System.String,System.String,Octokit.NewCommit)">
            <summary>
            Create a commit for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/git/commits/#create-a-commit
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="commit">The commit to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestReviewCommentsClient.GetAll(System.String,System.String,System.Int32)">
            <summary>
            Gets review comments for a specified pull request.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <returns>The list of <see cref="T:Octokit.PullRequestReviewComment"/>s for the specified pull request</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestReviewCommentsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets a list of the pull request review comments in a specified repository.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>The list of <see cref="T:Octokit.PullRequestReviewComment"/>s for the specified repository</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestReviewCommentsClient.GetAllForRepository(System.String,System.String,Octokit.PullRequestReviewCommentRequest)">
            <summary>
            Gets a list of the pull request review comments in a specified repository.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="request">The sorting <see cref="T:Octokit.PullRequestReviewCommentRequest">parameters</see></param>
            <returns>The list of <see cref="T:Octokit.PullRequestReviewComment"/>s for the specified repository</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestReviewCommentsClient.GetComment(System.String,System.String,System.Int32)">
            <summary>
            Gets a single pull request review comment by number.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#get-a-single-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request review comment number</param>
            <returns>The <see cref="T:Octokit.PullRequestReviewComment"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestReviewCommentsClient.Create(System.String,System.String,System.Int32,Octokit.PullRequestReviewCommentCreate)">
            <summary>
            Creates a comment on a pull request review.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#create-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The Pull Request number</param>
            <param name="comment">The comment</param>
            <returns>The created <see cref="T:Octokit.PullRequestReviewComment"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestReviewCommentsClient.CreateReply(System.String,System.String,System.Int32,Octokit.PullRequestReviewCommentReplyCreate)">
            <summary>
            Creates a comment on a pull request review as a reply to another comment.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#create-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <param name="comment">The comment</param>
            <returns>The created <see cref="T:Octokit.PullRequestReviewComment"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestReviewCommentsClient.Edit(System.String,System.String,System.Int32,Octokit.PullRequestReviewCommentEdit)">
            <summary>
            Edits a comment on a pull request review.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#edit-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request review comment number</param>
            <param name="comment">The edited comment</param>
            <returns>The edited <see cref="T:Octokit.PullRequestReviewComment"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestReviewCommentsClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes a comment on a pull request review.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#delete-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request review comment number</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStarredClient.GetAllStargazers(System.String,System.String)">
            <summary>
            Retrieves all of the stargazers for the passed repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s starring the passed repository</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStarredClient.GetAllForCurrent">
            <summary>
            Retrieves all of the starred <see cref="T:Octokit.Repository"/>(ies) for the current user
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>
            A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.Repository"/>(ies) starred by the current user
            </returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStarredClient.GetAllForCurrent(Octokit.StarredRequest)">
            <summary>
            Retrieves all of the starred <see cref="T:Octokit.Repository"/>(ies) for the current user
            </summary>
            <param name="request">Star-specific request parameters that sort the results</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>
            A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.Repository"/>(ies) starred by the current user,
            sorted according to the passed request parameters
            </returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStarredClient.GetAllForUser(System.String)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Repository"/>(ies) starred by the specified user
            </summary>
            <param name="user">The login of the user</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> starred by the specified user</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStarredClient.GetAllForUser(System.String,Octokit.StarredRequest)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Repository"/>(ies) starred by the specified user
            </summary>
            <param name="user">The login of the user</param>
            <param name="request">Star-specific request parameters that sort the results</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> starred by the specified user</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStarredClient.CheckStarred(System.String,System.String)">
            <summary>
            Check if a repository is starred by the current authenticated user
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <c>bool</c> representing the success of the operation</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStarredClient.StarRepo(System.String,System.String)">
            <summary>
            Stars a repository for the authenticated user
            </summary>
            <param name="owner">The owner of the repository to star</param>
            <param name="name">The name of the repository to star</param>
            <returns>A <c>bool</c> representing the success of starring</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableStarredClient.RemoveStarFromRepo(System.String,System.String)">
            <summary>
            Unstars a repository for the authenticated user
            </summary>
            <param name="owner">The owner of the repository to unstar</param>
            <param name="name">The name of the repository to unstar</param>
            <returns>A <c>bool</c> representing the success of the operation</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableCommitsClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a commit for a given repository by sha reference
            </summary>
            <remarks>
            http://developer.github.com/v3/git/commits/#get-a-commit
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">Tha sha reference of the commit</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableCommitsClient.Create(System.String,System.String,Octokit.NewCommit)">
            <summary>
            Create a commit for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/git/commits/#create-a-commit
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="commit">The commit to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableEventsClient.GetAll">
            <summary>
            Gets all the public events
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-public-events
            </remarks>
            <returns>All the public <see cref="T:Octokit.Activity"/>s for the particular user.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableEventsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all the events for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-issue-events-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s for the particular repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableEventsClient.GetAllForRepositoryNetwork(System.String,System.String)">
            <summary>
            Gets all the events for a given repository network
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s for the particular repository network.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableEventsClient.GetAllForOrganization(System.String)">
            <summary>
            Gets all the events for a given organization
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-public-events-for-an-organization
            </remarks>
            <param name="organization">The name of the organization</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s for the particular organization.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableEventsClient.GetAllUserReceived(System.String)">
            <summary>
            Gets all the events that have been received by a given user.
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received
            </remarks>
            <param name="user">The login of the user</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s that a particular user has received.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableEventsClient.GetAllUserReceivedPublic(System.String)">
            <summary>
            Gets all the events that have been received by a given user.
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-public-events-that-a-user-has-received
            </remarks>
            <param name="user">The login of the user</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s that a particular user has received.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableEventsClient.GetAllUserPerformed(System.String)">
            <summary>
            Gets all the events that have been performed by a given user.
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-events-performed-by-a-user
            </remarks>
            <param name="user">The login of the user</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s that a particular user has performed.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableEventsClient.GetAllUserPerformedPublic(System.String)">
            <summary>
            Gets all the public events that have been performed by a given user.
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-public-events-performed-by-a-user
            </remarks>
            <param name="user">The login of the user</param>
            <returns>All the public <see cref="T:Octokit.Activity"/>s that a particular user has performed.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableEventsClient.GetAllForAnOrganization(System.String,System.String)">
            <summary>
            Gets all the events that are associated with an organization.
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-events-for-an-organization
            </remarks>
            <param name="user">The login of the user</param>
            <param name="organization">The name of the organization</param>
            <returns>All the public <see cref="T:Octokit.Activity"/>s that are associated with an organization.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableBlobClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a single Blob by SHA.
            </summary>
            <remarks>
            http://developer.github.com/v3/git/blobs/#get-a-blob
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The SHA of the blob</param>
            <returns>The <see cref="T:Octokit.Blob"/> for the specified SHA.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableBlobClient.Create(System.String,System.String,Octokit.NewBlob)">
            <summary>
            Creates a new Blob
            </summary>
            <remarks>
            http://developer.github.com/v3/git/blobs/#create-a-blob
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newBlob">The new Blob</param>
            <returns>The <see cref="T:Octokit.Blob"/> that was just created.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTreesClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a Tree Response for a given SHA.
            </summary>
            <remarks>
            http://developer.github.com/v3/git/trees/#get-a-tree
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The SHA that references the tree</param>
            <returns>The <see cref="T:Octokit.TreeResponse"/> for the specified Tree.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTreesClient.GetRecursive(System.String,System.String,System.String)">
            <summary>
            Gets a Tree Response for a given SHA.
            </summary>
            <remarks>
            https://developer.github.com/v3/git/trees/#get-a-tree-recursively
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The SHA that references the tree</param>
            <returns>The <see cref="T:Octokit.TreeResponse"/> for the specified Tree.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTreesClient.Create(System.String,System.String,Octokit.NewTree)">
            <summary>
            Creates a new Tree in the specified repo
            </summary>
            <remarks>
            http://developer.github.com/v3/git/trees/#create-a-tree
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newTree">The value of the new tree</param>
            <returns>The <see cref="T:Octokit.TreeResponse"/> that was just created.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableEventsClient.GetAll">
            <summary>
            Gets all the public events
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-public-events
            </remarks>
            <returns>All the public <see cref="T:Octokit.Activity"/>s for the particular user.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableEventsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all the events for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-issue-events-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s for the particular repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableEventsClient.GetAllForRepositoryNetwork(System.String,System.String)">
            <summary>
            Gets all the events for a given repository network
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-public-events-for-a-network-of-repositories
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s for the particular repository network.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableEventsClient.GetAllForOrganization(System.String)">
            <summary>
            Gets all the events for a given organization
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-public-events-for-an-organization
            </remarks>
            <param name="organization">The name of the organization</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s for the particular organization.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableEventsClient.GetAllUserReceived(System.String)">
            <summary>
            Gets all the events that have been received by a given user.
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-events-that-a-user-has-received
            </remarks>
            <param name="user">The login of the user</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s that a particular user has received.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableEventsClient.GetAllUserReceivedPublic(System.String)">
            <summary>
            Gets all the events that have been received by a given user.
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-public-events-that-a-user-has-received
            </remarks>
            <param name="user">The login of the user</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s that a particular user has received.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableEventsClient.GetAllUserPerformed(System.String)">
            <summary>
            Gets all the events that have been performed by a given user.
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-events-performed-by-a-user
            </remarks>
            <param name="user">The login of the user</param>
            <returns>All the <see cref="T:Octokit.Activity"/>s that a particular user has performed.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableEventsClient.GetAllUserPerformedPublic(System.String)">
            <summary>
            Gets all the public events that have been performed by a given user.
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-public-events-performed-by-a-user
            </remarks>
            <param name="user">The login of the user</param>
            <returns>All the public <see cref="T:Octokit.Activity"/>s that a particular user has performed.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableEventsClient.GetAllForAnOrganization(System.String,System.String)">
            <summary>
            Gets all the events that are associated with an organization.
            </summary>
            <remarks>
            http://developer.github.com/v3/activity/events/#list-events-for-an-organization
            </remarks>
            <param name="user">The login of the user</param>
            <param name="organization">The name of the organization</param>
            <returns>All the public <see cref="T:Octokit.Activity"/>s that are associated with an organization.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationMembersClient.GetAll(System.String)">
            <summary>
            <para>
            List all users who are members of an organization. A member is a user that
            belongs to at least 1 team in the organization.
            </para>
            <para>
            If the authenticated user is also an owner of this organization then both
            concealed and public member will be returned.
            </para>
            <para>
            If the requester is not an owner of the organization the query will be redirected
            to the public members list.
            </para>
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/members/#members-list">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationMembersClient.GetAll(System.String,Octokit.OrganizationMembersFilter)">
            <summary>
            <para>
            List all users who are members of an organization. A member is a user that
            belongs to at least 1 team in the organization.
            </para>
            <para>
            If the authenticated user is also an owner of this organization then both
            concealed and public member will be returned.
            </para>
            <para>
            If the requester is not an owner of the organization the query will be redirected
            to the public members list.
            </para>
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/members/#members-list">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="filter">The members filter, <see cref="T:Octokit.OrganizationMembersFilter"/> </param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationMembersClient.GetAll(System.String,System.String)">
            <summary>
            Obsolete, <see cref="M:Octokit.Reactive.IObservableOrganizationMembersClient.GetAll(System.String,Octokit.OrganizationMembersFilter)"/>
            </summary>
            <param name="org">The login for the organization</param>
            <param name="filter">The user filter</param>
            <returns>The users</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationMembersClient.GetAllPublic(System.String)">
            <summary>
            List all users who have publicized their membership of the organization.
            </summary>
            <remarks>http://developer.github.com/v3/orgs/members/#public-members-list</remarks>
            <param name="org">The login for the organization</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationMembersClient.CheckMember(System.String,System.String)">
            <summary>
            Check if a user is, publicly or privately, a member of the organization.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/members/#check-membership">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationMembersClient.CheckMemberPublic(System.String,System.String)">
            <summary>
            Check is a user is publicly a member of the organization.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/members/#check-public-membership">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationMembersClient.Delete(System.String,System.String)">
            <summary>
            Removes a user from the organization, this will also remove them from all teams
            within the organization and they will no longer have any access to the organization's
            repositories.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/members/#remove-a-member">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationMembersClient.Publicize(System.String,System.String)">
            <summary>
            Make the authenticated user's organization membership public.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="http://developer.github.com/v3/orgs/members/#publicize-a-users-membership">API documentation</a> 
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationMembersClient.Conceal(System.String,System.String)">
            <summary>
            Make the authenticated user's organization membership private.
            </summary>
            <remarks>
            This method requries authentication.
            See the <a href="http://developer.github.com/v3/orgs/members/#conceal-a-users-membership">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestsClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single Pull Request by number.
            </summary>
            <remarks>
            http://developer.github.com/v3/pulls/#get-a-single-pull-request
            </remarks>
            <returns>A <see cref="T:Octokit.PullRequest"/> result</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all open pull requests for the repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/pulls/#list-pull-requests
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>A collection of <see cref="T:Octokit.PullRequest"/> results</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestsClient.GetAllForRepository(System.String,System.String,Octokit.PullRequestRequest)">
            <summary>
            Query pull requests for the repository based on criteria
            </summary>
            <remarks>
            http://developer.github.com/v3/pulls/#list-pull-requests
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="request">Used to filter and sort the list of pull requests returned</param>
            <returns>A collection of <see cref="T:Octokit.PullRequest"/> results</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestsClient.Create(System.String,System.String,Octokit.NewPullRequest)">
            <summary>
            Creates a pull request for the specified repository.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/#create-a-pull-request</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newPullRequest">A <see cref="T:Octokit.NewPullRequest"/> instance describing the new PullRequest to create</param>
            <returns>A created <see cref="T:Octokit.PullRequest"/> result</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestsClient.Update(System.String,System.String,System.Int32,Octokit.PullRequestUpdate)">
            <summary>
            Update a pull request for the specified repository.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/#update-a-pull-request</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The PullRequest number</param>
            <param name="pullRequestUpdate">An <see cref="T:Octokit.PullRequestUpdate"/> instance describing the changes to make to the PullRequest
            </param>
            <returns>An updated <see cref="T:Octokit.PullRequest"/> result</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestsClient.Merge(System.String,System.String,System.Int32,Octokit.MergePullRequest)">
            <summary>
            Merge a pull request.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/#merge-a-pull-request-merge-buttontrade</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <param name="mergePullRequest">A <see cref="T:Octokit.MergePullRequest"/> instance describing a pull request merge</param>
            <returns>A <see cref="T:Octokit.PullRequestMerge"/> result</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestsClient.Merged(System.String,System.String,System.Int32)">
            <summary>
            Gets the pull request merge status.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/#get-if-a-pull-request-has-been-merged</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <returns>A <see cref="T:System.Boolean"/> result - true if the pull request has been merged, false otherwise</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestsClient.Commits(System.String,System.String,System.Int32)">
            <summary>
            Gets the list of commits on a pull request.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/#list-commits-on-a-pull-request</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <returns>A collection of <see cref="T:Octokit.PullRequestCommit"/> results</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservablePullRequestsClient.Files(System.String,System.String,System.Int32)">
            <summary>
            Get the list of files on a pull request.
            </summary>
            <remarks>https://developer.github.com/v3/pulls/#list-pull-requests-files</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <returns>A collection of <see cref="T:Octokit.PullRequestFile"/> results</returns>
        </member>
        <member name="P:Octokit.Reactive.IObservablePullRequestsClient.Comment">
            <summary>
            Client for managing comments.
            </summary>
        </member>
        <member name="T:Octokit.Reactive.ObservableGitDatabaseClient">
            <summary>
            Used to maintain api structure therefore contains no methods
            </summary>
        </member>
        <member name="T:Octokit.Reactive.IObservableGitDatabaseClient">
            <summary>
            Used to maintain api structure therefore contains no methods
            </summary>
        </member>
        <member name="M:Octokit.Reactive.IObservableTagsClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a tag for a given repository by sha reference
            </summary>
            <remarks>
            http://developer.github.com/v3/git/tags/#get-a-tag
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">Tha sha reference of the tag</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableTagsClient.Create(System.String,System.String,Octokit.NewTag)">
            <summary>
            Create a tag for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/git/tags/#create-a-tag-object
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="tag">The tag to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesEventsClient.GetAllForIssue(System.String,System.String,System.Int32)">
            <summary>
            Gets all events for the issue.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/events/#list-events-for-an-issue
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The issue number</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesEventsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all events for the repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/events/#list-events-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesEventsClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single event
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/events/#get-a-single-event
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The event id</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesEventsClient.GetAllForIssue(System.String,System.String,System.Int32)">
            <summary>
            Gets all events for the issue.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/events/#list-events-for-an-issue
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The issue number</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesEventsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all events for the repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/events/#list-events-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesEventsClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single event
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/events/#get-a-single-event
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The event id</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single Issue by number.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#get-a-single-issue
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The issue number</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesClient.GetAllForCurrent">
            <summary>
            Gets all open issues assigned to the authenticated user across all the authenticated userâ€™s visible
            repositories including owned repositories, member repositories, and organization repositories.
            </summary>
            <remarks>
            Issues are sorted by the create date descending.
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesClient.GetAllForCurrent(Octokit.IssueRequest)">
            <summary>
            Gets all issues across all the authenticated userâ€™s visible repositories including owned repositories, 
            member repositories, and organization repositories.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <param name="request">Used to filter and sort the list of issues returned</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesClient.GetAllForOwnedAndMemberRepositories">
            <summary>
            Gets all open issues assigned to the authenticated user across owned and member repositories for the
            authenticated user.
            </summary>
            <remarks>
            Issues are sorted by the create date descending.
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesClient.GetAllForOwnedAndMemberRepositories(Octokit.IssueRequest)">
            <summary>
            Gets all issues across owned and member repositories for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <param name="request">Used to filter and sort the list of issues returned</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesClient.GetAllForOrganization(System.String)">
            <summary>
            Gets all open issues assigned to the authenticated user for a given organization for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <param name="organization">The name of the organization</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesClient.GetAllForOrganization(System.String,Octokit.IssueRequest)">
            <summary>
            Gets all issues for a given organization for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <param name="organization">The name of the organization</param>
            <param name="request">Used to filter and sort the list of issues returned</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all open issues assigned to the authenticated user for the repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesClient.GetAllForRepository(System.String,System.String,Octokit.RepositoryIssueRequest)">
            <summary>
            Gets issues for a repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="request">Used to filter and sort the list of issues returned</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesClient.Create(System.String,System.String,Octokit.NewIssue)">
            <summary>
            Creates an issue for the specified repository. Any user with pull access to a repository can create an
            issue.
            </summary>
            <remarks>http://developer.github.com/v3/issues/#create-an-issue</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newIssue">A <see cref="T:Octokit.NewIssue"/> instance describing the new issue to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssuesClient.Update(System.String,System.String,System.Int32,Octokit.IssueUpdate)">
            <summary>
            Creates an issue for the specified repository. Any user with pull access to a repository can create an
            issue.
            </summary>
            <remarks>http://developer.github.com/v3/issues/#create-an-issue</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The issue number</param>
            <param name="issueUpdate">An <see cref="T:Octokit.IssueUpdate"/> instance describing the changes to make to the issue
            </param>
            <returns></returns>
        </member>
        <member name="P:Octokit.Reactive.IObservableIssuesClient.Assignee">
            <summary>
            Client for managing assignees.
            </summary>
        </member>
        <member name="P:Octokit.Reactive.IObservableIssuesClient.Milestone">
            <summary>
            Client for managing milestones.
            </summary>
        </member>
        <member name="P:Octokit.Reactive.IObservableIssuesClient.Events">
            <summary>
            Client for reading various event information associated with issues/pull requests.  
            This is useful both for display on issue/pull request information pages and also to 
            determine who should be notified of comments.
            </summary>
        </member>
        <member name="P:Octokit.Reactive.IObservableIssuesClient.Labels">
            <summary>
            Client for managing labels.
            </summary>
        </member>
        <member name="P:Octokit.Reactive.IObservableIssuesClient.Comment">
            <summary>
            Client for managing comments.
            </summary>
        </member>
        <member name="M:Octokit.Reactive.IObservableMilestonesClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single Milestone by number.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/milestones/#get-a-single-milestone
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableMilestonesClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all open milestones for the repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableMilestonesClient.GetAllForRepository(System.String,System.String,Octokit.MilestoneRequest)">
            <summary>
            Gets all open milestones for the repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="request">Used to filter and sort the list of Milestones returned</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableMilestonesClient.Create(System.String,System.String,Octokit.NewMilestone)">
            <summary>
            Creates a milestone for the specified repository. Any user with pull access to a repository can create a
            Milestone.
            </summary>
            <remarks>http://developer.github.com/v3/issues/milestones/#create-a-milestone</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newMilestone">A <see cref="T:Octokit.NewMilestone"/> instance describing the new Milestone to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableMilestonesClient.Update(System.String,System.String,System.Int32,Octokit.MilestoneUpdate)">
            <summary>
            Updates a milestone for the specified repository. Any user with pull access to a repository can create a
            Milestone.
            </summary>
            <remarks>http://developer.github.com/v3/issues/milestones/#update-a-milestone</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The Milestone number</param>
            <param name="milestoneUpdate">An <see cref="T:Octokit.MilestoneUpdate"/> instance describing the changes to make to the Milestone
            </param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableMilestonesClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes a milestone for the specified repository. Any user with pull access to a repository can create an
            Milestone.
            </summary>
            <remarks>http://developer.github.com/v3/issues/milestones/#delete-a-milestone</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The milestone number</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single Issue by number.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#get-a-single-issue
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The issue number</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesClient.GetAllForCurrent">
            <summary>
            Gets all open issues assigned to the authenticated user across all the authenticated userâ€™s visible
            repositories including owned repositories, member repositories, and organization repositories.
            </summary>
            <remarks>
            Issues are sorted by the create date descending.
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesClient.GetAllForCurrent(Octokit.IssueRequest)">
            <summary>
            Gets all issues across all the authenticated userâ€™s visible repositories including owned repositories, 
            member repositories, and organization repositories.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <param name="request">Used to filter and sort the list of issues returned</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesClient.GetAllForOwnedAndMemberRepositories">
            <summary>
            Gets all open issues assigned to the authenticated user across owned and member repositories for the
            authenticated user.
            </summary>
            <remarks>
            Issues are sorted by the create date descending.
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesClient.GetAllForOwnedAndMemberRepositories(Octokit.IssueRequest)">
            <summary>
            Gets all issues across owned and member repositories for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <param name="request">Used to filter and sort the list of issues returned</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesClient.GetAllForOrganization(System.String)">
            <summary>
            Gets all open issues assigned to the authenticated user for a given organization for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <param name="organization">The name of the organization</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesClient.GetAllForOrganization(System.String,Octokit.IssueRequest)">
            <summary>
            Gets all issues for a given organization for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues
            </remarks>
            <param name="organization">The name of the organization</param>
            <param name="request">Used to filter and sort the list of issues returned</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all open issues assigned to the authenticated user for the repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesClient.GetAllForRepository(System.String,System.String,Octokit.RepositoryIssueRequest)">
            <summary>
            Gets issues for a repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/#list-issues-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="request">Used to filter and sort the list of issues returned</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesClient.Create(System.String,System.String,Octokit.NewIssue)">
            <summary>
            Creates an issue for the specified repository. Any user with pull access to a repository can create an
            issue.
            </summary>
            <remarks>http://developer.github.com/v3/issues/#create-an-issue</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newIssue">A <see cref="T:Octokit.NewIssue"/> instance describing the new issue to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssuesClient.Update(System.String,System.String,System.Int32,Octokit.IssueUpdate)">
            <summary>
            Creates an issue for the specified repository. Any user with pull access to a repository can create an
            issue.
            </summary>
            <remarks>http://developer.github.com/v3/issues/#create-an-issue</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The issue number</param>
            <param name="issueUpdate">An <see cref="T:Octokit.IssueUpdate"/> instance describing the changes to make to the issue
            </param>
            <returns></returns>
        </member>
        <member name="P:Octokit.Reactive.ObservableIssuesClient.Assignee">
            <summary>
            Client for managing assignees.
            </summary>
        </member>
        <member name="P:Octokit.Reactive.ObservableIssuesClient.Comment">
            <summary>
            Client for managing comments.
            </summary>
        </member>
        <member name="P:Octokit.Reactive.ObservableIssuesClient.Events">
            <summary>
            Client for reading various event information associated with issues/pull requests.  
            This is useful both for display on issue/pull request information pages and also to 
            determine who should be notified of comments.
            </summary>
        </member>
        <member name="P:Octokit.Reactive.ObservableIssuesClient.Labels">
            <summary>
            Client for managing labels.
            </summary>
        </member>
        <member name="P:Octokit.Reactive.ObservableIssuesClient.Milestone">
            <summary>
            Client for managing milestones.
            </summary>
        </member>
        <member name="M:Octokit.Reactive.ObservableMilestonesClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single Milestone by number.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/milestones/#get-a-single-milestone
            </remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMilestonesClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all open milestones for the repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMilestonesClient.GetAllForRepository(System.String,System.String,Octokit.MilestoneRequest)">
            <summary>
            Gets all open milestones for the repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/issues/milestones/#list-milestones-for-a-repository
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="request">Used to filter and sort the list of Milestones returned</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMilestonesClient.Create(System.String,System.String,Octokit.NewMilestone)">
            <summary>
            Creates a milestone for the specified repository. Any user with pull access to a repository can create a
            Milestone.
            </summary>
            <remarks>http://developer.github.com/v3/issues/milestones/#create-a-milestone</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newMilestone">A <see cref="T:Octokit.NewMilestone"/> instance describing the new Milestone to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMilestonesClient.Update(System.String,System.String,System.Int32,Octokit.MilestoneUpdate)">
            <summary>
            Updates a milestone for the specified repository. Any user with pull access to a repository can create a
            Milestone.
            </summary>
            <remarks>http://developer.github.com/v3/issues/milestones/#update-a-milestone</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The Milestone number</param>
            <param name="milestoneUpdate">An <see cref="T:Octokit.MilestoneUpdate"/> instance describing the changes to make to the Milestone
            </param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMilestonesClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes a milestone for the specified repository. Any user with pull access to a repository can create an
            Milestone.
            </summary>
            <remarks>http://developer.github.com/v3/issues/milestones/#delete-a-milestone</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The milestone number</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssueCommentsClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single Issue Comment by number.
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#get-a-single-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The issue comment number</param>
            <returns>The <see cref="T:Octokit.IssueComment"/>s for the specified Issue Comment.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssueCommentsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets Issue Comments for a repository.
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#list-comments-in-a-repository</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>The list of <see cref="T:Octokit.IssueComment"/>s for the specified Repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssueCommentsClient.GetAllForIssue(System.String,System.String,System.Int32)">
            <summary>
            Gets Issue Comments for a specified Issue.
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#list-comments-on-an-issue</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The issue number</param>
            <returns>The list of <see cref="T:Octokit.IssueComment"/>s for the specified Issue.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssueCommentsClient.Create(System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates a new Issue Comment for a specified Issue.
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#create-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <param name="newComment">The text of the new comment</param>
            <returns>The <see cref="T:Octokit.IssueComment"/> that was just created.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssueCommentsClient.Update(System.String,System.String,System.Int32,System.String)">
            <summary>
            Updates a specified Issue Comment.
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#edit-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The comment number</param>
            <param name="commentUpdate">The modified comment</param>
            <returns>The <see cref="T:Octokit.IssueComment"/> that was just updated.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableIssueCommentsClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes the specified Issue Comment
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#delete-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The comment number</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAssigneesClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all the available assignees (owner + collaborators) to which issues may be assigned.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAssigneesClient.CheckAssignee(System.String,System.String,System.String)">
            <summary>
            Checks to see if a user is an assignee for a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="assignee">Username of the prospective assignee</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAssigneesClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all the available assignees (owner + collaborators) to which issues may be assigned.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAssigneesClient.CheckAssignee(System.String,System.String,System.String)">
            <summary>
            Checks to see if a user is an assignee for a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="assignee">Username of the prospective assignee</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableCommitStatusClient.GetAll(System.String,System.String,System.String)">
            <summary>
            Retrieves commit statuses for the specified reference. A reference can be a commit SHA, a branch name, or
            a tag name.
            </summary>
            <remarks>Only users with pull access can see this.</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The reference (SHA, branch name, or tag name) to list commits for</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableCommitStatusClient.GetCombined(System.String,System.String,System.String)">
            <summary>
            Retrieves a combined view of statuses for the specified reference. A reference can be a commit SHA, a branch name, or
            a tag name.
            </summary>
            <remarks>Only users with pull access can see this.</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The reference (SHA, branch name, or tag name) to list commits for</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableCommitStatusClient.Create(System.String,System.String,System.String,Octokit.NewCommitStatus)">
            <summary>
            Creates a commit status for the specified ref.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The reference (SHA, branch name, or tag name) to list commits for</param>
            <param name="commitStatus">The commit status to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableCommitStatusClient.GetAll(System.String,System.String,System.String)">
            <summary>
            Retrieves commit statuses for the specified reference. A reference can be a commit SHA, a branch name, or
            a tag name.
            </summary>
            <remarks>Only users with pull access can see this.</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The reference (SHA, branch name, or tag name) to list commits for</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableCommitStatusClient.GetCombined(System.String,System.String,System.String)">
            <summary>
            Retrieves a combined view of statuses for the specified reference. A reference can be a commit SHA, a branch name, or
            a tag name.
            </summary>
            <remarks>Only users with pull access can see this.</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The reference (SHA, branch name, or tag name) to list commits for</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableCommitStatusClient.Create(System.String,System.String,System.String,Octokit.NewCommitStatus)">
            <summary>
            Creates a commit status for the specified ref.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The reference (SHA, branch name, or tag name) to list commits for</param>
            <param name="commitStatus">The commit status to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssueCommentsClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single Issue Comment by number.
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#get-a-single-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The issue comment number</param>
            <returns>The <see cref="T:Octokit.IssueComment"/>s for the specified Issue Comment.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssueCommentsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets Issue Comments for a repository.
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#list-comments-in-a-repository</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>The list of <see cref="T:Octokit.IssueComment"/>s for the specified Repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssueCommentsClient.GetAllForIssue(System.String,System.String,System.Int32)">
            <summary>
            Gets Issue Comments for a specified Issue.
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#list-comments-on-an-issue</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The issue number</param>
            <returns>The list of <see cref="T:Octokit.IssueComment"/>s for the specified Issue.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssueCommentsClient.Create(System.String,System.String,System.Int32,System.String)">
            <summary>
            Creates a new Issue Comment for a specified Issue.
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#create-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The number of the issue</param>
            <param name="newComment">The text of the new comment</param>
            <returns>The <see cref="T:Octokit.IssueComment"/> that was just created.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssueCommentsClient.Update(System.String,System.String,System.Int32,System.String)">
            <summary>
            Updates a specified Issue Comment.
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#edit-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The comment number</param>
            <param name="commentUpdate">The modified comment</param>
            <returns>The <see cref="T:Octokit.IssueComment"/> that was just updated.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableIssueCommentsClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes the specified Issue Comment
            </summary>
            <remarks>http://developer.github.com/v3/issues/comments/#delete-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The comment number</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.GetAllForCurrent">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Notification"/>s for the current user.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.Notification"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Notification"/>s for the current user specific to the specified repository.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.Notification"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.GetAllForCurrent(Octokit.NotificationsRequest)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Notification"/>s for the current user.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Notification"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.GetAllForRepository(System.String,System.String,Octokit.NotificationsRequest)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Notification"/>s for the current user specific to the specified repository.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Notification"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.MarkAsRead">
            <summary>
            Marks all notifications as read.
            </summary>
            <remarks>http://developer.github.com/v3/activity/notifications/#mark-as-read</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.MarkAsRead(Octokit.MarkAsReadRequest)">
            <summary>
            Marks all notifications as read.
            </summary>
            <param name="markAsReadRequest">The <see cref="T:Octokit.MarkAsReadRequest"/> parameter which specifies which notifications to mark.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#mark-as-read</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.MarkAsReadForRepository(System.String,System.String)">
            <summary>
            Marks the notifications for a given repository as read.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#mark-notifications-as-read-in-a-repository</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.MarkAsReadForRepository(System.String,System.String,Octokit.MarkAsReadRequest)">
            <summary>
            Marks the notifications for a given repository as read.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="markAsRead">The <see cref="T:Octokit.MarkAsReadRequest"/> parameter which specifies which notifications to mark.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#mark-notifications-as-read-in-a-repository</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.Get(System.Int32)">
            <summary>
            Retrives a single <see cref="T:Octokit.Notification"/> by Id.
            </summary>
            <param name="id">The Id of the notification to retrieve.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#view-a-single-thread</remarks>
            <returns>A <see cref="T:Octokit.Notification"/> for the given Id.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.MarkAsRead(System.Int32)">
            <summary>
            Marks a single notification as read.
            </summary>
            <param name="id">The id of the notification.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.GetThreadSubscription(System.Int32)">
            <summary>
            Retrives a <see cref="T:Octokit.ThreadSubscription"/> for the provided thread id.
            </summary>
            <param name="id">The Id of the thread to retrieve subscription status.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#get-a-thread-subscription</remarks>
            <returns>A <see cref="T:Octokit.ThreadSubscription"/> for the chosen thread.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.SetThreadSubscription(System.Int32,Octokit.NewThreadSubscription)">
            <summary>
            Sets the authenticated user's subscription settings for a given thread.
            </summary>
            <param name="id">The Id of the thread to update.</param>
            <param name="threadSubscription">The subscription parameters to set.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#set-a-thread-subscription</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableNotificationsClient.DeleteThreadSubscription(System.Int32)">
            <summary>
            Deletes the authenticated user's subscription to a given thread.
            </summary>
            <param name="id">The Id of the thread to delete subscription from.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.GetAllForCurrent">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Notification"/>s for the current user.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.Notification"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.GetAllForCurrent(Octokit.NotificationsRequest)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Notification"/>s for the current user.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Notification"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Notification"/>s for the current user specific to the specified repository.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.Notification"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.GetAllForRepository(System.String,System.String,Octokit.NotificationsRequest)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Notification"/>s for the current user specific to the specified repository.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Notification"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.MarkAsRead">
            <summary>
            Marks all notifications as read.
            </summary>
            <remarks>http://developer.github.com/v3/activity/notifications/#mark-as-read</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.MarkAsRead(Octokit.MarkAsReadRequest)">
            <summary>
            Marks all notifications as read.
            </summary>
            <param name="markAsReadRequest">The <see cref="T:Octokit.MarkAsReadRequest"/> parameter which specifies which notifications to mark.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#mark-as-read</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.MarkAsReadForRepository(System.String,System.String)">
            <summary>
            Marks the notifications for a given repository as read.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#mark-notifications-as-read-in-a-repository</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.MarkAsReadForRepository(System.String,System.String,Octokit.MarkAsReadRequest)">
            <summary>
            Marks the notifications for a given repository as read.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="markAsRead">The <see cref="T:Octokit.MarkAsReadRequest"/> parameter which specifies which notifications to mark.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#mark-notifications-as-read-in-a-repository</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.Get(System.Int32)">
            <summary>
            Retrives a single <see cref="T:Octokit.Notification"/> by Id.
            </summary>
            <param name="id">The Id of the notification to retrieve.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#view-a-single-thread</remarks>
            <returns>A <see cref="T:Octokit.Notification"/> for the given Id.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.MarkAsRead(System.Int32)">
            <summary>
            Marks a single notification as read.
            </summary>
            <param name="id">The id of the notification.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#mark-a-thread-as-read</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.GetThreadSubscription(System.Int32)">
            <summary>
            Retrives a <see cref="T:Octokit.ThreadSubscription"/> for the provided thread id.
            </summary>
            <param name="id">The Id of the thread to retrieve subscription status.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#get-a-thread-subscription</remarks>
            <returns>A <see cref="T:Octokit.ThreadSubscription"/> for the chosen thread.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.SetThreadSubscription(System.Int32,Octokit.NewThreadSubscription)">
            <summary>
            Sets the authenticated user's subscription settings for a given thread.
            </summary>
            <param name="id">The Id of the thread to update.</param>
            <param name="threadSubscription">The subscription parameters to set.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#set-a-thread-subscription</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableNotificationsClient.DeleteThreadSubscription(System.Int32)">
            <summary>
            Deletes the authenticated user's subscription to a given thread.
            </summary>
            <param name="id">The Id of the thread to delete subscription from.</param>
            <remarks>http://developer.github.com/v3/activity/notifications/#delete-a-thread-subscription</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.GetAll">
            <summary>
            Get all <see cref="T:Octokit.Authorization"/>s for the authenticated user. This method requires basic auth.
            </summary>
            <remarks>
            See <a href="http://developer.github.com/v3/oauth/#list-your-authorizations">API documentation</a> for more
            details.
            </remarks>
            <returns>An <see cref="T:Octokit.Authorization"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.Get(System.Int32)">
            <summary>
            Get a specific <see cref="T:Octokit.Authorization"/> for the authenticated user. This method requires basic auth.
            </summary>
            <remarks>
            See <a href="http://developer.github.com/v3/oauth/#get-a-single-authorization">API documentation</a> for
            more details.
            </remarks>
            <param name="id">The id of the <see cref="T:Octokit.Authorization"/></param>
            <returns>An <see cref="T:Octokit.Authorization"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.Create(System.String,System.String,Octokit.NewAuthorization)">
            <summary>
            Creates a new authorization for the specified OAuth application if an authorization for that application
            doesnâ€™t already exist for the user; otherwise, it fails.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="http://developer.github.com/v3/oauth/#get-or-create-an-authorization-for-a-specific-app">API documentation</a> for more information.
            </remarks>
            <param name="clientId">Client ID of the OAuth application for the token</param>
            <param name="clientSecret">The client secret</param>
            <param name="newAuthorization">Describes the new authorization to create</param>
            <exception cref="T:Octokit.AuthorizationException">
            Thrown when the current user does not have permission to make this request.
            </exception>
            <exception cref="T:Octokit.TwoFactorRequiredException">
            Thrown when the current account has two-factor authentication enabled and an authentication code is required.
            </exception>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The created <see cref="T:Octokit.Authorization"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.Create(System.String,System.String,Octokit.NewAuthorization,System.String)">
            <summary>
            Creates a new authorization for the specified OAuth application if an authorization for that application
            doesnâ€™t already exist for the user; otherwise, it fails.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="http://developer.github.com/v3/oauth/#get-or-create-an-authorization-for-a-specific-app">API documentation</a> for more information.
            </remarks>
            <param name="clientId">Client ID of the OAuth application for the token</param>
            <param name="clientSecret">The client secret</param>
            <param name="twoFactorAuthenticationCode">The two-factor authentication code in response to the current user's previous challenge</param>
            <param name="newAuthorization">Describes the new authorization to create</param>
            <exception cref="T:Octokit.AuthorizationException">
            Thrown when the current user does not have permission to make this request.
            </exception>
            <exception cref="T:Octokit.TwoFactorRequiredException">
            Thrown when the current account has two-factor authentication enabled and an authentication code is required.
            </exception>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The created <see cref="T:Octokit.Authorization"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.GetOrCreateApplicationAuthentication(System.String,System.String,Octokit.NewAuthorization)">
            <summary>
            This method will create a new authorization for the specified OAuth application, only if an authorization 
            for that application doesnâ€™t already exist for the user. It returns the userâ€™s token for the application
            if one exists. Otherwise, it creates one.
            </summary>
            <remarks>
            See <a href="http://developer.github.com/v3/oauth/#get-or-create-an-authorization-for-a-specific-app">API
            documentation</a> for more details.
            </remarks>
            <param name="clientId">Client ID for the OAuth application that is requesting the token</param>
            <param name="clientSecret">The client secret</param>
            <param name="newAuthorization">Defines the scopes and metadata for the token</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown when the user does not have permission to make 
            this request. Check </exception>
            <exception cref="T:Octokit.TwoFactorRequiredException">Thrown when the current account has two-factor
            authentication enabled.</exception>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.GetOrCreateApplicationAuthentication(System.String,System.String,Octokit.NewAuthorization,System.String)">
            <summary>
            This method will create a new authorization for the specified OAuth application, only if an authorization 
            for that application doesnâ€™t already exist for the user. It returns the userâ€™s token for the application
            if one exists. Otherwise, it creates one.
            </summary>
            <remarks>
            See <a href="http://developer.github.com/v3/oauth/#get-or-create-an-authorization-for-a-specific-app">API 
            documentation</a> for more details.
            </remarks>
            <param name="clientId">Client ID for the OAuth application that is requesting the token</param>
            <param name="clientSecret">The client secret</param>
            <param name="newAuthorization">Defines the scopes and metadata for the token</param>
            <param name="twoFactorAuthenticationCode">The two-factor authentication code provided by the user</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown when the user does not have permission to make 
            this request. Check </exception>
            <exception cref="T:Octokit.TwoFactorChallengeFailedException">Thrown when the two-factor code is not
            valid.</exception>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.CheckApplicationAuthentication(System.String,System.String)">
            <summary>
            Checks the validity of an OAuth token without running afoul of normal rate limits for failed login attempts.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="https://developer.github.com/v3/oauth_authorizations/#check-an-authorization">API documentation</a> for more information.
            </remarks>
            <param name="clientId">Client ID of the OAuth application for the token</param>
            <param name="accessToken">The OAuth token to check</param>
            <returns>The valid <see cref="T:Octokit.ApplicationAuthorization"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.ResetApplicationAuthentication(System.String,System.String)">
            <summary>
            Resets a valid OAuth token for an OAuth application without end user involvment.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="https://developer.github.com/v3/oauth_authorizations/#reset-an-authorization">API documentation</a> for more information.
            </remarks>
            <param name="clientId">ClientID of the OAuth application for the token</param>
            <param name="accessToken">The OAuth token to reset</param>
            <returns>The valid <see cref="T:Octokit.ApplicationAuthorization"/> with a new OAuth token</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.RevokeApplicationAuthentication(System.String,System.String)">
            <summary>
            Revokes a single OAuth token for an OAuth application.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="https://developer.github.com/v3/oauth_authorizations/#revoke-an-authorization-for-an-application">API documentation for more information.</a>
            </remarks>
            <param name="clientId">ClientID of the OAuth application for the token</param>
            <param name="accessToken">The OAuth token to revoke</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.RevokeAllApplicationAuthentications(System.String)">
            <summary>
            Revokes every OAuth token for an OAuth application.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="https://developer.github.com/v3/oauth_authorizations/#revoke-all-authorizations-for-an-application">API documentation for more information.</a>
            </remarks>
            <param name="clientId">ClientID of the OAuth application for the token</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.Update(System.Int32,Octokit.AuthorizationUpdate)">
            <summary>
            Update the <see cref="T:Octokit.Authorization"/> specified by the id.
            </summary>
            <param name="id">The id of the <see cref="T:Octokit.Authorization"/></param>
            <param name="authorizationUpdate">The changes to make to the authorization</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.Delete(System.Int32)">
            <summary>
            Deletes the specified <see cref="T:Octokit.Authorization"/>.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="http://developer.github.com/v3/oauth/#delete-an-authorization">API 
            documentation</a> for more details.
            </remarks>
            <param name="id">The system-wide ID of the authorization to delete</param>
            <exception cref="T:Octokit.AuthorizationException">
            Thrown when the current user does not have permission to make the request.
            </exception>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
        </member>
        <member name="M:Octokit.Reactive.IObservableAuthorizationsClient.Delete(System.Int32,System.String)">
            <summary>
            Deletes the specified <see cref="T:Octokit.Authorization"/>.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="http://developer.github.com/v3/oauth/#delete-an-authorization">API 
            documentation</a> for more details.
            </remarks>
            <param name="id">The system-wide ID of the authorization to delete</param>
            <param name="twoFactorAuthenticationCode">Two factor authorization code</param>
            <exception cref="T:Octokit.AuthorizationException">
            Thrown when the current user does not have permission to make the request.
            </exception>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.GetAll">
            <summary>
            Get all <see cref="T:Octokit.Authorization"/>s for the authenticated user. This method requires basic auth.
            </summary>
            <remarks>
            See <a href="http://developer.github.com/v3/oauth/#list-your-authorizations">API documentation</a> for more
            details.
            </remarks>
            <returns>An <see cref="T:Octokit.Authorization"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.Get(System.Int32)">
            <summary>
            Get a specific <see cref="T:Octokit.Authorization"/> for the authenticated user. This method requires basic auth.
            </summary>
            <remarks>
            See <a href="http://developer.github.com/v3/oauth/#get-a-single-authorization">API documentation</a> for
            more details.
            </remarks>
            <param name="id">The id of the <see cref="T:Octokit.Authorization"/></param>
            <returns>An <see cref="T:Octokit.Authorization"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.Create(System.String,System.String,Octokit.NewAuthorization)">
            <summary>
            Creates a new authorization for the specified OAuth application if an authorization for that application
            doesnâ€™t already exist for the user; otherwise, it fails.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="http://developer.github.com/v3/oauth/#get-or-create-an-authorization-for-a-specific-app">API documentation</a> for more information.
            </remarks>
            <param name="clientId">Client ID of the OAuth application for the token</param>
            <param name="clientSecret">The client secret</param>
            <param name="newAuthorization">Describes the new authorization to create</param>
            <exception cref="T:Octokit.AuthorizationException">
            Thrown when the current user does not have permission to make this request.
            </exception>
            <exception cref="T:Octokit.TwoFactorRequiredException">
            Thrown when the current account has two-factor authentication enabled and an authentication code is required.
            </exception>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The created <see cref="T:Octokit.Authorization"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.Create(System.String,System.String,Octokit.NewAuthorization,System.String)">
            <summary>
            Creates a new authorization for the specified OAuth application if an authorization for that application
            doesnâ€™t already exist for the user; otherwise, it fails.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="http://developer.github.com/v3/oauth/#get-or-create-an-authorization-for-a-specific-app">API documentation</a> for more information.
            </remarks>
            <param name="clientId">Client ID of the OAuth application for the token</param>
            <param name="clientSecret">The client secret</param>
            <param name="twoFactorAuthenticationCode">The two-factor authentication code in response to the current user's previous challenge</param>
            <param name="newAuthorization">Describes the new authorization to create</param>
            <exception cref="T:Octokit.AuthorizationException">
            Thrown when the current user does not have permission to make this request.
            </exception>
            <exception cref="T:Octokit.TwoFactorRequiredException">
            Thrown when the current account has two-factor authentication enabled and an authentication code is required.
            </exception>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The created <see cref="T:Octokit.Authorization"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.GetOrCreateApplicationAuthentication(System.String,System.String,Octokit.NewAuthorization)">
            <summary>
            This method will create a new authorization for the specified OAuth application, only if an authorization 
            for that application doesnâ€™t already exist for the user. It returns the userâ€™s token for the application
            if one exists. Otherwise, it creates one.
            </summary>
            <remarks>
            See <a href="http://developer.github.com/v3/oauth/#get-or-create-an-authorization-for-a-specific-app">API
            documentation</a> for more details.
            </remarks>
            <param name="clientId">Client ID for the OAuth application that is requesting the token</param>
            <param name="clientSecret">The client secret</param>
            <param name="newAuthorization">Defines the scopes and metadata for the token</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown when the user does not have permission to make 
            this request. Check </exception>
            <exception cref="T:Octokit.TwoFactorRequiredException">Thrown when the current account has two-factor
            authentication enabled.</exception>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.GetOrCreateApplicationAuthentication(System.String,System.String,Octokit.NewAuthorization,System.String)">
            <summary>
            This method will create a new authorization for the specified OAuth application, only if an authorization 
            for that application doesnâ€™t already exist for the user. It returns the userâ€™s token for the application
            if one exists. Otherwise, it creates one.
            </summary>
            <remarks>
            See <a href="http://developer.github.com/v3/oauth/#get-or-create-an-authorization-for-a-specific-app">API 
            documentation</a> for more details.
            </remarks>
            <param name="clientId">Client ID for the OAuth application that is requesting the token</param>
            <param name="clientSecret">The client secret</param>
            <param name="newAuthorization">Defines the scopes and metadata for the token</param>
            <param name="twoFactorAuthenticationCode">The two-factor authentication code provided by the user</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown when the user does not have permission to make 
            this request. Check </exception>
            <exception cref="T:Octokit.TwoFactorChallengeFailedException">Thrown when the two-factor code is not
            valid.</exception>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.CheckApplicationAuthentication(System.String,System.String)">
            <summary>
            Checks the validity of an OAuth token without running afoul of normal rate limits for failed login attempts.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="https://developer.github.com/v3/oauth_authorizations/#check-an-authorization">API documentation</a> for more information.
            </remarks>
            <param name="clientId">Client ID of the OAuth application for the token</param>
            <param name="accessToken">The OAuth token to check</param>
            <returns>The valid <see cref="T:Octokit.ApplicationAuthorization"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.ResetApplicationAuthentication(System.String,System.String)">
            <summary>
            Resets a valid OAuth token for an OAuth application without end user involvment.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="https://developer.github.com/v3/oauth_authorizations/#reset-an-authorization">API documentation</a> for more information.
            </remarks>
            <param name="clientId">ClientID of the OAuth application for the token</param>
            <param name="accessToken">The OAuth token to reset</param>
            <returns>The valid <see cref="T:Octokit.ApplicationAuthorization"/> with a new OAuth token</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.RevokeApplicationAuthentication(System.String,System.String)">
            <summary>
            Revokes a single OAuth token for an OAuth application.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="https://developer.github.com/v3/oauth_authorizations/#revoke-an-authorization-for-an-application">API documentation for more information.</a>
            </remarks>
            <param name="clientId">ClientID of the OAuth application for the token</param>
            <param name="accessToken">The OAuth token to revoke</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.RevokeAllApplicationAuthentications(System.String)">
            <summary>
            Revokes every OAuth token for an OAuth application.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="https://developer.github.com/v3/oauth_authorizations/#revoke-all-authorizations-for-an-application">API documentation for more information.</a>
            </remarks>
            <param name="clientId">ClientID of the OAuth application for the token</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.Update(System.Int32,Octokit.AuthorizationUpdate)">
            <summary>
            Update the <see cref="T:Octokit.Authorization"/> specified by the id.
            </summary>
            <param name="id">The id of the <see cref="T:Octokit.Authorization"/></param>
            <param name="authorizationUpdate">The changes to make to the authorization</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.Delete(System.Int32)">
            <summary>
            Deletes the specified <see cref="T:Octokit.Authorization"/>.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="http://developer.github.com/v3/oauth/#delete-an-authorization">API 
            documentation</a> for more details.
            </remarks>
            <param name="id">The system-wide ID of the authorization to delete</param>
            <exception cref="T:Octokit.AuthorizationException">
            Thrown when the current user does not have permission to make the request.
            </exception>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
        </member>
        <member name="M:Octokit.Reactive.ObservableAuthorizationsClient.Delete(System.Int32,System.String)">
            <summary>
            Deletes the specified <see cref="T:Octokit.Authorization"/>.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="http://developer.github.com/v3/oauth/#delete-an-authorization">API 
            documentation</a> for more details.
            </remarks>
            <param name="id">The system-wide ID of the authorization to delete</param>
            <param name="twoFactorAuthenticationCode">Two factor authorization code</param>
            <exception cref="T:Octokit.AuthorizationException">
            Thrown when the current user does not have permission to make the request.
            </exception>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
        </member>
        <member name="M:Octokit.Reactive.IObservableMiscellaneousClient.GetAllEmojis">
            <summary>
            Gets all the emojis available to use on GitHub.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>An <see cref="T:System.IObservable`1"/> of emoji and their URI.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableMiscellaneousClient.RenderRawMarkdown(System.String)">
            <summary>
            Gets the rendered Markdown for the specified plain-text Markdown document.
            </summary>
            <param name="markdown">A plain-text Markdown document</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The rendered Markdown.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableMiscellaneousClient.GetAllGitIgnoreTemplates">
            <summary>
            List all templates available to pass as an option when creating a repository.
            </summary>
            <returns>An observable list of gitignore template names.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableMiscellaneousClient.GetGitIgnoreTemplate(System.String)">
            <summary>
            Retrieves the source for a single GitIgnore template
            </summary>
            <param name="templateName">Returns the template source for the given template</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableMiscellaneousClient.GetAllLicenses">
            <summary>
            Returns a list of the licenses shown in the license picker on GitHub.com. This is not a comprehensive
            list of all possible OSS licenses.
            </summary>
            <remarks>This is a PREVIEW API! Use it at your own risk.</remarks>
            <returns>A list of licenses available on the site</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableMiscellaneousClient.GetLicense(System.String)">
            <summary>
            Retrieves a license based on the licence key such as "mit"
            </summary>
            <param name="key"></param>
            <returns>A <see cref="T:Octokit.License"/> that includes the license key, text, and attributes of the license.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableMiscellaneousClient.GetRateLimits">
            <summary>
            Gets API Rate Limits (API service rather than header info).
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>An <see cref="T:Octokit.MiscellaneousRateLimit"/> of Rate Limits.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableMiscellaneousClient.GetMetadata">
            <summary>
            Retrieves information about GitHub.com, the service or a GitHub Enterprise installation.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>An <see cref="T:Octokit.Meta"/> containing metadata about the GitHub instance.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMiscellaneousClient.GetAllEmojis">
            <summary>
            Gets all the emojis available to use on GitHub.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>An <see cref="T:System.IObservable`1"/> of emoji and their URI.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMiscellaneousClient.RenderRawMarkdown(System.String)">
            <summary>
            Gets the rendered Markdown for the specified plain-text Markdown document.
            </summary>
            <param name="markdown">A plain-text Markdown document</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The rendered Markdown.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMiscellaneousClient.GetAllGitIgnoreTemplates">
            <summary>
            List all templates available to pass as an option when creating a repository.
            </summary>
            <returns>An observable list of gitignore template names.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMiscellaneousClient.GetGitIgnoreTemplate(System.String)">
            <summary>
            Retrieves the source for a single GitIgnore template
            </summary>
            <param name="templateName">Returns the template source for the given template</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableMiscellaneousClient.GetAllLicenses">
            <summary>
            Returns a list of the licenses shown in the license picker on GitHub.com. This is not a comprehensive
            list of all possible OSS licenses.
            </summary>
            <remarks>This is a PREVIEW API! Use it at your own risk.</remarks>
            <returns>A list of licenses available on the site</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMiscellaneousClient.GetLicense(System.String)">
            <summary>
            Retrieves a license based on the licence key such as "mit"
            </summary>
            <param name="key"></param>
            <returns>A <see cref="T:Octokit.License"/> that includes the license key, text, and attributes of the license.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMiscellaneousClient.GetRateLimits">
            <summary>
            Gets API Rate Limits (API service rather than header info).
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>An <see cref="T:Octokit.MiscellaneousRateLimit"/> of Rate Limits.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableMiscellaneousClient.GetMetadata">
            <summary>
            Retrieves information about GitHub.com, the service or a GitHub Enterprise installation.
            </summary>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>An <see cref="T:Octokit.Meta"/> containing metadata about the GitHub instance.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationMembersClient.#ctor(Octokit.IGitHubClient)">
            <summary>
            Initializes a new Organization Members API client.
            </summary>
            <param name="client">An <see cref="T:Octokit.IGitHubClient"/> used to make the requests</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationMembersClient.GetAll(System.String)">
            <summary>
            <para>
            List all users who are members of an organization. A member is a user that
            belongs to at least 1 team in the organization.
            </para>
            <para>
            If the authenticated user is also an owner of this organization then both
            concealed and public member will be returned.
            </para>
            <para>
            If the requester is not an owner of the organization the query will be redirected
            to the public members list.
            </para>
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/members/#members-list">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationMembersClient.GetAll(System.String,Octokit.OrganizationMembersFilter)">
            <summary>
            <para>
            List all users who are members of an organization. A member is a user that
            belongs to at least 1 team in the organization.
            </para>
            <para>
            If the authenticated user is also an owner of this organization then both
            concealed and public member will be returned.
            </para>
            <para>
            If the requester is not an owner of the organization the query will be redirected
            to the public members list.
            </para>
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/members/#members-list">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="filter">The members filter, <see cref="T:Octokit.OrganizationMembersFilter"/> </param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationMembersClient.GetAll(System.String,System.String)">
            <summary>
            Obsolete, <see cref="M:Octokit.Reactive.ObservableOrganizationMembersClient.GetAll(System.String,Octokit.OrganizationMembersFilter)"/>
            </summary>
            <param name="org">The login for the organization</param>
            <param name="filter">The user filter</param>
            <returns>The users</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationMembersClient.GetAllPublic(System.String)">
            <summary>
            List all users who have publicized their membership of the organization.
            </summary>
            <remarks>http://developer.github.com/v3/orgs/members/#public-members-list</remarks>
            <param name="org">The login for the organization</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationMembersClient.CheckMember(System.String,System.String)">
            <summary>
            Check if a user is, publicly or privately, a member of the organization.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/members/#check-membership">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationMembersClient.CheckMemberPublic(System.String,System.String)">
            <summary>
            Check is a user is publicly a member of the organization.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/members/#check-public-membership">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationMembersClient.Delete(System.String,System.String)">
            <summary>
            Removes a user from the organization, this will also remove them from all teams
            within the organization and they will no longer have any access to the organization's
            repositories.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/orgs/members/#remove-a-member">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationMembersClient.Publicize(System.String,System.String)">
            <summary>
            Make the authenticated user's organization membership public.
            </summary>
            <remarks>
            This method requires authentication.
            See the <a href="http://developer.github.com/v3/orgs/members/#publicize-a-users-membership">API documentation</a> 
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationMembersClient.Conceal(System.String,System.String)">
            <summary>
            Make the authenticated user's organization membership private.
            </summary>
            <remarks>
            This method requries authentication.
            See the <a href="http://developer.github.com/v3/orgs/members/#conceal-a-users-membership">API documentation</a>
            for more information.
            </remarks>
            <param name="org">The login for the organization</param>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationsClient.Get(System.String)">
            <summary>
            Returns the specified organization.
            </summary>
            <param name="org">The login of the specified organization,</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationsClient.GetAllForCurrent">
            <summary>
            Returns all the organizations for the current user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationsClient.GetAll(System.String)">
            <summary>
            Returns all the organizations for the specified user
            </summary>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableOrganizationsClient.Update(System.String,Octokit.OrganizationUpdate)">
            <summary>
            Update the specified organization with data from <see cref="T:Octokit.OrganizationUpdate"/>.
            </summary>
            <param name="organizationName">The name of the organization to update.</param>
            <param name="updateRequest"></param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.Organization"/></returns>
        </member>
        <member name="P:Octokit.Reactive.IObservableOrganizationsClient.Member">
            <summary>
            Returns a client to manage members of an organization.
            </summary>
        </member>
        <member name="P:Octokit.Reactive.IObservableOrganizationsClient.Team">
            <summary>
            Returns a client to manage teams for an organization.
            </summary>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationsClient.#ctor(Octokit.IGitHubClient)">
            <summary>
            Initializes a new Organization API client.
            </summary>
            <param name="client">An <see cref="T:Octokit.IGitHubClient"/> used to make the requests</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationsClient.Get(System.String)">
            <summary>
            Returns the specified organization.
            </summary>
            <param name="org">The login of the specified organization,</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationsClient.GetAllForCurrent">
            <summary>
            Returns all the organizations for the current user.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationsClient.GetAll(System.String)">
            <summary>
            Returns all the organizations for the specified user
            </summary>
            <param name="user">The login for the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableOrganizationsClient.Update(System.String,Octokit.OrganizationUpdate)">
            <summary>
            Update the specified organization with data from <see cref="T:Octokit.OrganizationUpdate"/>.
            </summary>
            <param name="organizationName">The name of the organization to update.</param>
            <param name="updateRequest"></param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.Organization"/></returns>
        </member>
        <member name="P:Octokit.Reactive.ObservableOrganizationsClient.Member">
            <summary>
            Returns a client to manage members of an organization.
            </summary>
        </member>
        <member name="P:Octokit.Reactive.ObservableOrganizationsClient.Team">
            <summary>
            Returns a client to manage teams for an organization.
            </summary>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestsClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single Pull Request by number.
            </summary>
            <remarks>
            http://developer.github.com/v3/pulls/#get-a-single-pull-request
            </remarks>
            <returns>A <see cref="T:Octokit.PullRequest"/> result</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets all open pull requests for the repository.
            </summary>
            <remarks>
            http://developer.github.com/v3/pulls/#list-pull-requests
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>A collection of <see cref="T:Octokit.PullRequest"/> results</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestsClient.GetAllForRepository(System.String,System.String,Octokit.PullRequestRequest)">
            <summary>
            Query pull requests for the repository based on criteria
            </summary>
            <remarks>
            http://developer.github.com/v3/pulls/#list-pull-requests
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="request">Used to filter and sort the list of pull requests returned</param>
            <returns>A collection of <see cref="T:Octokit.PullRequest"/> results</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestsClient.Create(System.String,System.String,Octokit.NewPullRequest)">
            <summary>
            Creates a pull request for the specified repository.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/#create-a-pull-request</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newPullRequest">A <see cref="T:Octokit.NewPullRequest"/> instance describing the new PullRequest to create</param>
            <returns>A created <see cref="T:Octokit.PullRequest"/> result</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestsClient.Update(System.String,System.String,System.Int32,Octokit.PullRequestUpdate)">
            <summary>
            Update a pull request for the specified repository.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/#update-a-pull-request</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The PullRequest number</param>
            <param name="pullRequestUpdate">An <see cref="T:Octokit.PullRequestUpdate"/> instance describing the changes to make to the PullRequest
            </param>
            <returns>An updated <see cref="T:Octokit.PullRequest"/> result</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestsClient.Merge(System.String,System.String,System.Int32,Octokit.MergePullRequest)">
            <summary>
            Merge a pull request.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/#merge-a-pull-request-merge-buttontrade</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <param name="mergePullRequest">A <see cref="T:Octokit.MergePullRequest"/> instance describing a pull request merge</param>
            <returns>A <see cref="T:Octokit.PullRequestMerge"/> result</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestsClient.Merged(System.String,System.String,System.Int32)">
            <summary>
            Gets the pull request merge status.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/#get-if-a-pull-request-has-been-merged</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <returns>A <see cref="T:System.Boolean"/> result - true if the pull request has been merged, false otherwise</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestsClient.Commits(System.String,System.String,System.Int32)">
            <summary>
            Gets the list of commits on a pull request.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/#list-commits-on-a-pull-request</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <returns>A collection of <see cref="T:Octokit.PullRequestCommit"/> results</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestsClient.Files(System.String,System.String,System.Int32)">
            <summary>
            Get the list of files on a pull request.
            </summary>
            <remarks>https://developer.github.com/v3/pulls/#list-pull-requests-files</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <returns>A collection of <see cref="T:Octokit.PullRequestFile"/> results</returns>
        </member>
        <member name="P:Octokit.Reactive.ObservablePullRequestsClient.Comment">
            <summary>
            Client for managing comments.
            </summary>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestReviewCommentsClient.GetAll(System.String,System.String,System.Int32)">
            <summary>
            Gets review comments for a specified pull request.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#list-comments-on-a-pull-request</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <returns>The list of <see cref="T:Octokit.PullRequestReviewComment"/>s for the specified pull request</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestReviewCommentsClient.GetAllForRepository(System.String,System.String)">
            <summary>
            Gets a list of the pull request review comments in a specified repository.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>The list of <see cref="T:Octokit.PullRequestReviewComment"/>s for the specified repository</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestReviewCommentsClient.GetAllForRepository(System.String,System.String,Octokit.PullRequestReviewCommentRequest)">
            <summary>
            Gets a list of the pull request review comments in a specified repository.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#list-comments-in-a-repository</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="request">The sorting <see cref="T:Octokit.PullRequestReviewCommentRequest">parameters</see></param>
            <returns>The list of <see cref="T:Octokit.PullRequestReviewComment"/>s for the specified repository</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestReviewCommentsClient.GetComment(System.String,System.String,System.Int32)">
            <summary>
            Gets a single pull request review comment by number.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#get-a-single-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request review comment number</param>
            <returns>The <see cref="T:Octokit.PullRequestReviewComment"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestReviewCommentsClient.Create(System.String,System.String,System.Int32,Octokit.PullRequestReviewCommentCreate)">
            <summary>
            Creates a comment on a pull request review.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#create-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The Pull Request number</param>
            <param name="comment">The comment</param>
            <returns>The created <see cref="T:Octokit.PullRequestReviewComment"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestReviewCommentsClient.CreateReply(System.String,System.String,System.Int32,Octokit.PullRequestReviewCommentReplyCreate)">
            <summary>
            Creates a comment on a pull request review as a reply to another comment.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#create-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request number</param>
            <param name="comment">The comment</param>
            <returns>The created <see cref="T:Octokit.PullRequestReviewComment"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestReviewCommentsClient.Edit(System.String,System.String,System.Int32,Octokit.PullRequestReviewCommentEdit)">
            <summary>
            Edits a comment on a pull request review.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#edit-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request review comment number</param>
            <param name="comment">The edited comment</param>
            <returns>The edited <see cref="T:Octokit.PullRequestReviewComment"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservablePullRequestReviewCommentsClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes a comment on a pull request review.
            </summary>
            <remarks>http://developer.github.com/v3/pulls/comments/#delete-a-comment</remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="number">The pull request review comment number</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReleasesClient.GetAll(System.String,System.String)">
            <summary>
            Gets all <see cref="T:Octokit.Release"/>s for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#list-releases-for-a-repository">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The list of <see cref="T:Octokit.Release"/>s for the specified repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReleasesClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single <see cref="T:Octokit.Release"/> for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#get-a-single-release">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="id">The id of the release</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The <see cref="T:Octokit.Release"/> specified by the id</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReleasesClient.Create(System.String,System.String,Octokit.NewRelease)">
            <summary>
            Creates a new <see cref="T:Octokit.Release"/> for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#create-a-release">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="data">A description of the release to create</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The created <see cref="T:Octokit.Release"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReleasesClient.Edit(System.String,System.String,System.Int32,Octokit.ReleaseUpdate)">
            <summary>
            Edits an existing <see cref="T:Octokit.Release"/> for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#edit-a-release">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="id">The id of the release</param>
            <param name="data">A description of the release to edit</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The updated <see cref="T:Octokit.Release"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReleasesClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes an existing <see cref="T:Octokit.Release"/> for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#delete-a-release">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="id">The id of the release to delete</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReleasesClient.GetAllAssets(System.String,System.String,System.Int32)">
            <summary>
            Gets all <see cref="T:Octokit.ReleaseAsset"/> for the specified release of the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#list-assets-for-a-release">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="id">The id of the <see cref="T:Octokit.Release"/>.</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The list of <see cref="T:Octokit.ReleaseAsset"/> for the specified release of the specified repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReleasesClient.UploadAsset(Octokit.Release,Octokit.ReleaseAssetUpload)">
            <summary>
            Uploads a <see cref="T:Octokit.ReleaseAsset"/> for the specified release.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#upload-a-release-asset">API documentation</a> for more information.
            </remarks>
            <param name="release">The <see cref="T:Octokit.Release"/> to attach the uploaded asset to</param>
            <param name="data">Description of the asset with its data</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The created <see cref="T:Octokit.ReleaseAsset"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReleasesClient.GetAsset(System.String,System.String,System.Int32)">
            <summary>
            Gets the specified <see cref="T:Octokit.ReleaseAsset"/> for the specified release of the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#get-a-single-release-asset">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="assetId">The id of the <see cref="T:Octokit.ReleaseAsset"/></param>
            <returns>The <see cref="T:Octokit.ReleaseAsset"/> specified by the asset id.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReleasesClient.EditAsset(System.String,System.String,System.Int32,Octokit.ReleaseAssetUpdate)">
            <summary>
            Edits the <see cref="T:Octokit.ReleaseAsset"/> for the specified release of the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#edit-a-release-asset">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="assetId">The id of the <see cref="T:Octokit.ReleaseAsset"/></param>
            <param name="data">Description of the asset with its amended data</param>
            <returns>The edited <see cref="T:Octokit.ReleaseAsset"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableReleasesClient.DeleteAsset(System.String,System.String,System.Int32)">
            <summary>
            Deletes the specified <see cref="T:Octokit.ReleaseAsset"/> from the specified repository
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#delete-a-release-asset">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="id">The id of the <see cref="T:Octokit.ReleaseAsset"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReleasesClient.GetAll(System.String,System.String)">
            <summary>
            Gets all <see cref="T:Octokit.Release"/>s for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#list-releases-for-a-repository">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The list of <see cref="T:Octokit.Release"/>s for the specified repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReleasesClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single <see cref="T:Octokit.Release"/> for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#get-a-single-release">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="id">The id of the release</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The <see cref="T:Octokit.Release"/> specified by the id</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReleasesClient.Create(System.String,System.String,Octokit.NewRelease)">
            <summary>
            Creates a new <see cref="T:Octokit.Release"/> for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#create-a-release">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="data">A description of the release to create</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The created <see cref="T:Octokit.Release"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReleasesClient.Edit(System.String,System.String,System.Int32,Octokit.ReleaseUpdate)">
            <summary>
            Edits an existing <see cref="T:Octokit.Release"/> for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#edit-a-release">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="id">The id of the release</param>
            <param name="data">A description of the release to edit</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The updated <see cref="T:Octokit.Release"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReleasesClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes an existing <see cref="T:Octokit.Release"/> for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#delete-a-release">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="id">The id of the release to delete</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReleasesClient.GetAllAssets(System.String,System.String,System.Int32)">
            <summary>
            Gets all <see cref="T:Octokit.ReleaseAsset"/> for the specified release of the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#list-assets-for-a-release">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="id">The id of the <see cref="T:Octokit.Release"/>.</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The list of <see cref="T:Octokit.ReleaseAsset"/> for the specified release of the specified repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReleasesClient.GetAsset(System.String,System.String,System.Int32)">
            <summary>
            Gets the specified <see cref="T:Octokit.ReleaseAsset"/> for the specified release of the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#get-a-single-release-asset">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="assetId">The id of the <see cref="T:Octokit.ReleaseAsset"/></param>
            <returns>The <see cref="T:Octokit.ReleaseAsset"/> specified by the asset id.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReleasesClient.UploadAsset(Octokit.Release,Octokit.ReleaseAssetUpload)">
            <summary>
            Uploads a <see cref="T:Octokit.ReleaseAsset"/> for the specified release.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#upload-a-release-asset">API documentation</a> for more information.
            </remarks>
            <param name="release">The <see cref="T:Octokit.Release"/> to attach the uploaded asset to</param>
            <param name="data">Description of the asset with its data</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>The created <see cref="T:Octokit.ReleaseAsset"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReleasesClient.EditAsset(System.String,System.String,System.Int32,Octokit.ReleaseAssetUpdate)">
            <summary>
            Edits the <see cref="T:Octokit.ReleaseAsset"/> for the specified release of the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#edit-a-release-asset">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="assetId">The id of the <see cref="T:Octokit.ReleaseAsset"/></param>
            <param name="data">Description of the asset with its amended data</param>
            <returns>The edited <see cref="T:Octokit.ReleaseAsset"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableReleasesClient.DeleteAsset(System.String,System.String,System.Int32)">
            <summary>
            Deletes the specified <see cref="T:Octokit.ReleaseAsset"/> from the specified repository
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/releases/#delete-a-release-asset">API documentation</a> for more information.
            </remarks>
            <param name="owner">The repository's owner</param>
            <param name="name">The repository's name</param>
            <param name="id">The id of the <see cref="T:Octokit.ReleaseAsset"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.Create(Octokit.NewRepository)">
            <summary>
            Creates a new repository for the current user.
            </summary>
            <param name="newRepository">A <see cref="T:Octokit.NewRepository"/> instance describing the new repository to create</param>
            <returns>An <see cref="T:System.IObservable`1"/> instance for the created repository</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.Create(System.String,Octokit.NewRepository)">
            <summary>
            Creates a new repository in the specified organization.
            </summary>
            <param name="organizationLogin">The login of the organization in which to create the repostiory</param>
            <param name="newRepository">A <see cref="T:Octokit.NewRepository"/> instance describing the new repository to create</param>
            <returns>An <see cref="T:System.IObservable`1"/> instance for the created repository</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.Delete(System.String,System.String)">
            <summary>
            Deletes a repository for the specified owner and name.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <remarks>Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.</remarks>
            <returns>An <see cref="T:System.IObservable`1"/> for the operation</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.Get(System.String,System.String)">
            <summary>
            Retrieves the <see cref="T:Octokit.Repository"/> for the specified owner and name.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>A <see cref="T:Octokit.Repository"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllPublic">
            <summary>
            Retrieves every public <see cref="T:Octokit.Repository"/>.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllPublic(Octokit.PublicRepositoryRequest)">
            <summary>
            Retrieves every public <see cref="T:Octokit.Repository"/> since the last repository seen.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <param name="request">Search parameters of the last repository seen</param>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllForCurrent">
            <summary>
            Retrieves every <see cref="T:Octokit.Repository"/> that belongs to the current user.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllForCurrent(Octokit.RepositoryRequest)">
            <summary>
            Retrieves every <see cref="T:Octokit.Repository"/> that belongs to the current user.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <param name="request">Search parameters to filter results on</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllForUser(System.String)">
            <summary>
            Retrieves every <see cref="T:Octokit.Repository"/> that belongs to the specified user.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllForOrg(System.String)">
            <summary>
            Retrieves every <see cref="T:Octokit.Repository"/> that belongs to the specified organization.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllBranches(System.String,System.String)">
            <summary>
            Gets all the branches for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-branches">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>All <see cref="T:Octokit.Branch"/>es of the repository</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllContributors(System.String,System.String)">
            <summary>
            Gets all contributors for the specified repository. Does not include anonymous contributors.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-contributors">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All contributors of the repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllContributors(System.String,System.String,System.Boolean)">
            <summary>
            Gets all contributors for the specified repository. With the option to include anonymous contributors.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-contributors">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="includeAnonymous">True if anonymous contributors should be included in result; Otherwise false</param>
            <returns>All contributors of the repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllLanguages(System.String,System.String)">
            <summary>
            Gets all languages for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-languages">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All languages used in the repository and the number of bytes of each language.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllTeams(System.String,System.String)">
            <summary>
            Gets all teams for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-teams">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All <see cref="T:Octokit.Team"/>s associated with the repository</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetAllTags(System.String,System.String)">
            <summary>
            Gets all tags for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-tags">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All of the repositorys tags.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.GetBranch(System.String,System.String,System.String)">
            <summary>
            Gets the specified branch.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#get-branch">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <param name="branchName">The name of the branch</param>
            <returns>The specified <see cref="T:Octokit.Branch"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableRepositoriesClient.Edit(System.String,System.String,Octokit.RepositoryUpdate)">
            <summary>
            Updates the specified repository with the values given in <paramref name="update"/>
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="update">New values to update the repository with</param>
            <returns>The updated <see cref="T:Octokit.Repository"/></returns>
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.CommitStatus">
            <summary>
            A client for GitHub's Commit Status API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/statuses/">Commit Status API documentation</a> for more
            details. Also check out the <a href="https://github.com/blog/1227-commit-status-api">blog post</a> 
            that announced this feature.
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.Deployment">
            <summary>
            Client for GitHub's Repository Deployments API
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/deployment/">Collaborators API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.Statistics">
             <summary>
             Client for GitHub's Repository Statistics API
             </summary>
             <remarks>
             See the <a href="http://developer.github.com/v3/repos/statistics/">Statistics API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.RepositoryComments">
            <summary>
            Client for GitHub's Repository Comments API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/comments/">Repository Comments API documentation</a> for more information.
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.Hooks">
            <summary>
            A client for GitHub's Repository Hooks API.
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/">Hooks API documentation</a> for more information.</remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.Forks">
            <summary>
            A client for GitHub's Repository Forks API.
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/forks/">Forks API documentation</a> for more information.</remarks>        
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.Content">
            <summary>
            Client for GitHub's Repository Contents API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/contents/">Repository Contents API documentation</a> for more information.
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.Merging">
             <summary>
             Client for GitHub's Repository Merging API
             </summary>
             <remarks>
             See the <a href="https://developer.github.com/v3/repos/merging/">Merging API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.RepoCollaborators">
            <summary>
            A client for GitHub's Repo Collaborators.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/collaborators/">Collaborators API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.Commits">
             <summary>
             Client for GitHub's Repository Commits API
             </summary>
             <remarks>
             See the <a href="http://developer.github.com/v3/repos/commits/">Commits API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.PullRequest">
            <summary>
            Client for managing pull requests.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/pulls/">Pull Requests API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableRepositoriesClient.DeployKeys">
            <summary>
            Client for managing deploy keys
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/repos/keys/">Repository Deploy Keys API documentation</a> for more information.
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.Create(Octokit.NewRepository)">
            <summary>
            Creates a new repository for the current user.
            </summary>
            <param name="newRepository">A <see cref="T:Octokit.NewRepository"/> instance describing the new repository to create</param>
            <returns>An <see cref="T:System.IObservable`1"/> instance for the created repository</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.Create(System.String,Octokit.NewRepository)">
            <summary>
            Creates a new repository in the specified organization.
            </summary>
            <param name="organizationLogin">The login of the organization in which to create the repostiory</param>
            <param name="newRepository">A <see cref="T:Octokit.NewRepository"/> instance describing the new repository to create</param>
            <returns>An <see cref="T:System.IObservable`1"/> instance for the created repository</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.Delete(System.String,System.String)">
            <summary>
            Deletes a repository for the specified owner and name.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <remarks>Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.</remarks>
            <returns>An <see cref="T:System.IObservable`1"/> for the operation</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.Get(System.String,System.String)">
            <summary>
            Retrieves the <see cref="T:Octokit.Repository"/> for the specified owner and name.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>A <see cref="T:Octokit.Repository"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllPublic">
            <summary>
            Retrieves every public <see cref="T:Octokit.Repository"/>.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllPublic(Octokit.PublicRepositoryRequest)">
            <summary>
            Retrieves every public <see cref="T:Octokit.Repository"/> since the last repository seen.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <param name="request">Search parameters of the last repository seen</param>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllForCurrent">
            <summary>
            Retrieves every <see cref="T:Octokit.Repository"/> that belongs to the current user.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllForCurrent(Octokit.RepositoryRequest)">
            <summary>
            Retrieves every <see cref="T:Octokit.Repository"/> that belongs to the current user.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <param name="request">Search parameters to filter results on</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllForUser(System.String)">
            <summary>
            Retrieves every <see cref="T:Octokit.Repository"/> that belongs to the specified user.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllForOrg(System.String)">
            <summary>
            Retrieves every <see cref="T:Octokit.Repository"/> that belongs to the specified organization.
            </summary>
            <remarks>
            The default page size on GitHub.com is 30.
            </remarks>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.Repository"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllBranches(System.String,System.String)">
            <summary>
            Gets all the branches for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-branches">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <exception cref="T:Octokit.ApiException">Thrown when a general API error occurs.</exception>
            <returns>All <see cref="T:Octokit.Branch"/>es of the repository</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllContributors(System.String,System.String)">
            <summary>
            Gets all contributors for the specified repository. Does not include anonymous contributors.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-contributors">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All contributors of the repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllContributors(System.String,System.String,System.Boolean)">
            <summary>
            Gets all contributors for the specified repository. With the option to include anonymous contributors.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-contributors">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="includeAnonymous">True if anonymous contributors should be included in result; Otherwise false</param>
            <returns>All contributors of the repository.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllLanguages(System.String,System.String)">
            <summary>
            Gets all languages for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-languages">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All languages used in the repository and the number of bytes of each language.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllTeams(System.String,System.String)">
            <summary>
            Gets all teams for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-teams">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All <see cref="T:Octokit.Team"/>s associated with the repository</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetAllTags(System.String,System.String)">
            <summary>
            Gets all tags for the specified repository.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#list-tags">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <returns>All of the repositorys tags.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.GetBranch(System.String,System.String,System.String)">
            <summary>
            Gets the specified branch.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/#get-branch">API documentation</a> for more details
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <param name="branchName">The name of the branch</param>
            <returns>The specified <see cref="T:Octokit.Branch"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.Edit(System.String,System.String,Octokit.RepositoryUpdate)">
            <summary>
            Updates the specified repository with the values given in <paramref name="update"/>
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="update">New values to update the repository with</param>
            <returns>The updated <see cref="T:Octokit.Repository"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoriesClient.Compare(System.String,System.String,System.String,System.String)">
            <summary>
            Compare two references in a repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="base">The reference to use as the base commit</param>
            <param name="head">The reference to use as the head commit</param>
            <returns></returns>
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.CommitStatus">
            <summary>
            A client for GitHub's Commit Status API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/statuses/">Commit Status API documentation</a> for more
            details. Also check out the <a href="https://github.com/blog/1227-commit-status-api">blog post</a> 
            that announced this feature.
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.Deployment">
            <summary>
            Client for GitHub's Repository Deployments API
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/deployment/">Collaborators API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.Statistics">
             <summary>
             Client for GitHub's Repository Statistics API
             </summary>
             <remarks>
             See the <a href="http://developer.github.com/v3/repos/statistics/">Statistics API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.RepositoryComments">
            <summary>
            Client for GitHub's Repository Comments API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/comments/">Repository Comments API documentation</a> for more information.
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.Hooks">
            <summary>
            A client for GitHub's Repository Hooks API.
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/">Hooks API documentation</a> for more information.</remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.Forks">
            <summary>
            A client for GitHub's Repository Forks API.
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/forks/">Forks API documentation</a> for more information.</remarks>        
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.Content">
            <summary>
            Client for GitHub's Repository Contents API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/contents/">Repository Contents API documentation</a> for more information.
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.Merging">
             <summary>
             Client for GitHub's Repository Merging API
             </summary>
             <remarks>
             See the <a href="https://developer.github.com/v3/repos/merging/">Merging API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.RepoCollaborators">
            <summary>
            A client for GitHub's Repo Collaborators.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/repos/collaborators/">Collaborators API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.Commits">
             <summary>
             Client for GitHub's Repository Commits API
             </summary>
             <remarks>
             See the <a href="http://developer.github.com/v3/repos/commits/">Commits API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.PullRequest">
            <summary>
            Client for managing pull requests.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/pulls/">Pull Requests API documentation</a> for more details
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableRepositoriesClient.DeployKeys">
            <summary>
            Client for managing deploy keys
            </summary>
            <remarks>
            See the <a href="https://developer.github.com/v3/repos/keys/">Repository Deploy Keys API documentation</a> for more information.
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryHooksClient.GetAll(System.String,System.String)">
            <summary>
            Gets the list of hooks defined for a repository
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#list">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryHooksClient.Get(System.String,System.String,System.Int32)">
            <summary>
            Gets a single hook defined for a repository by id
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#get-single-hook">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryHooksClient.Create(System.String,System.String,Octokit.NewRepositoryHook)">
            <summary>
            Creates a hook for a repository
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#create-a-hook">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryHooksClient.Edit(System.String,System.String,System.Int32,Octokit.EditRepositoryHook)">
            <summary>
            Edits a hook for a repository
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#edit-a-hook">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryHooksClient.Test(System.String,System.String,System.Int32)">
            <summary>
            Tests a hook for a repository
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#test-a-hook">API documentation</a> for more information. 
            This will trigger the hook with the latest push to the current repository if the hook is subscribed to push events. If the hook 
            is not subscribed to push events, the server will respond with 204 but no test POST will be generated.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryHooksClient.Ping(System.String,System.String,System.Int32)">
            <summary>
            This will trigger a ping event to be sent to the hook.
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#edit-a-hook">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryHooksClient.Delete(System.String,System.String,System.Int32)">
            <summary>
            Deletes a hook for a repository
            </summary>
            <param name="owner"></param>
            <param name="repositoryName"></param>
            <param name="hookId"></param>
            <remarks>See <a href="http://developer.github.com/v3/repos/hooks/#delete-a-hook">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableSshKeysClient.Get(System.Int32)">
            <summary>
            Retrieves the <see cref="T:Octokit.SshKey"/> for the specified id.
            </summary>
            <param name="id">The ID of the SSH key</param>
            <returns>A <see cref="T:Octokit.SshKey"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableSshKeysClient.GetAll(System.String)">
            <summary>
            Retrieves the <see cref="T:Octokit.SshKey"/> for the specified id.
            </summary>
            <param name="user">The login of the user</param>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.SshKey"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableSshKeysClient.GetAllForCurrent">
            <summary>
            Retrieves the <see cref="T:Octokit.SshKey"/> for the specified id.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.SshKey"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableSshKeysClient.Create(Octokit.SshKeyUpdate)">
            <summary>
            Update the specified <see cref="T:Octokit.UserUpdate"/>.
            </summary>
            <param name="key">The SSH Key contents</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.User"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableSshKeysClient.Update(System.Int32,Octokit.SshKeyUpdate)">
            <summary>
            Update the specified <see cref="T:Octokit.UserUpdate"/>.
            </summary>
            <param name="id">The ID of the SSH key</param>
            <param name="key">The SSH Key contents</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.User"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableSshKeysClient.Delete(System.Int32)">
            <summary>
            Update the specified <see cref="T:Octokit.UserUpdate"/>.
            </summary>
            <param name="id">The id of the SSH key</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.User"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableSshKeysClient.#ctor(Octokit.IGitHubClient)">
            <summary>
            Initializes a new SSH Key API client.
            </summary>
            <param name="client">An <see cref="T:Octokit.IGitHubClient"/> used to make the requests</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableSshKeysClient.Get(System.Int32)">
            <summary>
            Retrieves the <see cref="T:Octokit.SshKey"/> for the specified id.
            </summary>
            <param name="id">The ID of the SSH key</param>
            <returns>A <see cref="T:Octokit.SshKey"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableSshKeysClient.GetAll(System.String)">
            <summary>
            Retrieves the <see cref="T:Octokit.SshKey"/> for the specified id.
            </summary>
            <param name="user">The login of the user</param>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.SshKey"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableSshKeysClient.GetAllForCurrent">
            <summary>
            Retrieves the <see cref="T:Octokit.SshKey"/> for the specified id.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.IReadOnlyPagedCollection`1"/> of <see cref="T:Octokit.SshKey"/>.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableSshKeysClient.Create(Octokit.SshKeyUpdate)">
            <summary>
            Update the specified <see cref="T:Octokit.UserUpdate"/>.
            </summary>
            <param name="key">The SSH Key contents</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.User"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableSshKeysClient.Update(System.Int32,Octokit.SshKeyUpdate)">
            <summary>
            Update the specified <see cref="T:Octokit.UserUpdate"/>.
            </summary>
            <param name="id">The ID of the SSH key</param>
            <param name="key">The SSH Key contents</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.User"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableSshKeysClient.Delete(System.Int32)">
            <summary>
            Update the specified <see cref="T:Octokit.UserUpdate"/>.
            </summary>
            <param name="id">The id of the SSH key</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.User"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStarredClient.GetAllStargazers(System.String,System.String)">
            <summary>
            Retrieves all of the stargazers for the passed repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s starring the passed repository</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStarredClient.GetAllForCurrent">
            <summary>
            Retrieves all of the starred <see cref="T:Octokit.Repository"/>(ies) for the current user
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>
            A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.Repository"/>(ies) starred by the current user
            </returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStarredClient.GetAllForCurrent(Octokit.StarredRequest)">
            <summary>
            Retrieves all of the starred <see cref="T:Octokit.Repository"/>(ies) for the current user
            </summary>
            <param name="request">Star-specific request parameters that sort the results</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>
            A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.Repository"/>(ies) starred by the current user,
            sorted according to the passed request parameters
            </returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStarredClient.GetAllForUser(System.String)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Repository"/>(ies) starred by the specified user
            </summary>
            <param name="user">The login of the user</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> starred by the specified user</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStarredClient.GetAllForUser(System.String,Octokit.StarredRequest)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Repository"/>(ies) starred by the specified user
            </summary>
            <param name="user">The login of the user</param>
            <param name="request">Star-specific request parameters that sort the results</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> starred by the specified user</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStarredClient.CheckStarred(System.String,System.String)">
            <summary>
            Check if a repository is starred by the current authenticated user
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <c>bool</c> representing the success of the operation</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStarredClient.StarRepo(System.String,System.String)">
            <summary>
            Stars a repository for the authenticated user
            </summary>
            <param name="owner">The owner of the repository to star</param>
            <param name="name">The name of the repository to star</param>
            <returns>A <c>bool</c> representing the success of starring</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStarredClient.RemoveStarFromRepo(System.String,System.String)">
            <summary>
            Unstars a repository for the authenticated user
            </summary>
            <param name="owner">The owner of the repository to unstar</param>
            <param name="name">The name of the repository to unstar</param>
            <returns>A <c>bool</c> representing the success of the operation</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStatisticsClient.GetContributors(System.String,System.String)">
            <summary>
            Returns a list of <see cref="T:Octokit.Contributor"/> for the given repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <returns>A list of <see cref="T:Octokit.Contributor"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStatisticsClient.GetCommitActivity(System.String,System.String)">
            <summary>
            Returns the last year of commit activity grouped by week.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <returns>The last year of  <see cref="T:Octokit.CommitActivity"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStatisticsClient.GetCodeFrequency(System.String,System.String)">
            <summary>
            Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <returns>Returns a weekly aggregate of the number additions and deletion</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStatisticsClient.GetParticipation(System.String,System.String)">
            <summary>
            Returns the total commit counts for the owner and total commit counts in total. 
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <returns>Returns <see cref="T:Octokit.Participation"/>from oldest week to now</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableStatisticsClient.GetPunchCard(System.String,System.String)">
            <summary>
            Returns a list of the number of commits per hour in each day
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="repositoryName">The name of the repository</param>
            <returns>Returns commit counts per hour in each day</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTagsClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a tag for a given repository by sha reference
            </summary>
            <remarks>
            http://developer.github.com/v3/git/tags/#get-a-tag
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">Tha sha reference of the tag</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTagsClient.Create(System.String,System.String,Octokit.NewTag)">
            <summary>
            Create a tag for a given repository
            </summary>
            <remarks>
            http://developer.github.com/v3/git/tags/#create-a-tag-object
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="tag">The tag to create</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTreesClient.Get(System.String,System.String,System.String)">
            <summary>
            Gets a Tree Response for a given SHA.
            </summary>
            <remarks>
            http://developer.github.com/v3/git/trees/#get-a-tree
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The SHA that references the tree</param>
            <returns>The <see cref="T:Octokit.TreeResponse"/> for the specified Tree.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTreesClient.GetRecursive(System.String,System.String,System.String)">
            <summary>
            Gets a Tree Response for a given SHA.
            </summary>
            <remarks>
            https://developer.github.com/v3/git/trees/#get-a-tree-recursively
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="reference">The SHA that references the tree</param>
            <returns>The <see cref="T:Octokit.TreeResponse"/> for the specified Tree.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableTreesClient.Create(System.String,System.String,Octokit.NewTree)">
            <summary>
            Creates a new Tree in the specified repo
            </summary>
            <remarks>
            http://developer.github.com/v3/git/trees/#create-a-tree
            </remarks>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <param name="newTree">The value of the new tree</param>
            <returns>The <see cref="T:Octokit.TreeResponse"/> that was just created.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableFollowersClient.#ctor(Octokit.IGitHubClient)">
            <summary>
            Initializes a new User Followers API client.
            </summary>
            <param name="client">An <see cref="T:Octokit.IGitHubClient"/> used to make the requests</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableFollowersClient.GetAllForCurrent">
            <summary>
            List the authenticated userâ€™s followers
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#list-followers-of-a-user">API documentation</a> for more information.
            </remarks>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s that follow the authenticated user.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableFollowersClient.GetAll(System.String)">
            <summary>
            List a userâ€™s followers
            </summary>
            <param name="login">The login name for the user</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#list-followers-of-a-user">API documentation</a> for more information.
            </remarks>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s that follow the passed user.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableFollowersClient.GetAllFollowingForCurrent">
            <summary>
            List who the authenticated user is following
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#list-users-followed-by-another-user">API documentation</a> for more information.
            </remarks>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s that the authenticated user follows.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableFollowersClient.GetAllFollowing(System.String)">
            <summary>
            List who a user is following
            </summary>
            <param name="login">The login name of the user</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#list-users-followed-by-another-user">API documentation</a> for more information.
            </remarks>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s that the passed user follows.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableFollowersClient.IsFollowingForCurrent(System.String)">
            <summary>
            Check if the authenticated user follows another user
            </summary>
            <param name="following">The login name of the other user</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#check-if-you-are-following-a-user">API documentation</a> for more information.
            </remarks>
            <returns>A <c>bool</c> representing the success of the operation.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableFollowersClient.IsFollowing(System.String,System.String)">
            <summary>
            Check if one user follows another user
            </summary>
            <param name="login">The login name of the user</param>
            <param name="following">The login name of the other user</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#check-if-one-user-follows-another">API documentation</a> for more information.
            </remarks>
            <returns>A <c>bool</c> representing the success of the operation.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableFollowersClient.Follow(System.String)">
            <summary>
            Follow a user
            </summary>
            <param name="login">The login name of the user to follow</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#follow-a-user">API documentation</a> for more information.
            </remarks>
            <returns>A <c>bool</c> representing the success of the operation.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableFollowersClient.Unfollow(System.String)">
            <summary>
            Unfollow a user
            </summary>
            <param name="login">The login name of the user to unfollow</param>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/followers/#unfollow-a-user">API documentation</a> for more information.
            </remarks>
            <returns></returns>
        </member>
        <member name="T:Octokit.Reactive.ObservableUserEmailsClient">
            <summary>
            A client for GitHub's User Emails API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/emails/">User Emails API documentation</a> for more information.
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.ObservableUserEmailsClient.GetAll">
            <summary>
            Gets all email addresses for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user
            </remarks>
            <returns>The <see cref="T:Octokit.EmailAddress"/>es for the authenticated user.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableUserEmailsClient.Add(System.String[])">
            <summary>
            Adds email addresses for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/users/emails/#add-email-addresses
            </remarks>
            <param name="emailAddresses">The email addresses to add.</param>
            <returns>Returns the added <see cref="T:Octokit.EmailAddress"/>es.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableUserEmailsClient.Delete(System.String[])">
            <summary>
            Deletes email addresses for the authenticated user.
            </summary>
            <remarks>
            http://developer.github.com/v3/users/emails/#delete-email-addresses
            </remarks>
            <param name="emailAddresses">The email addresses to delete.</param>
            <returns>Returns the added <see cref="T:Octokit.EmailAddress"/>es.</returns>
        </member>
        <member name="T:Octokit.Reactive.ObservableUserKeysClient">
            <summary>
            A client for GitHub's User Keys API.
            </summary>
            <remarks>
            See the <a href="http://developer.github.com/v3/users/keys/">User Keys API documentation</a> for more information.
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.ObservableUserKeysClient.GetAll">
            <summary>
            Gets all public keys for the authenticated user.
            </summary>
            <remarks>
            https://developer.github.com/v3/users/keys/#list-your-public-keys
            </remarks>
            <returns>The <see cref="T:Octokit.PublicKey"/>s for the authenticated user.</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableUserKeysClient.GetAll(System.String)">
            <summary>
            Gets all verified public keys for a user.
            </summary>
            <remarks>
            https://developer.github.com/v3/users/keys/#list-public-keys-for-a-user
            </remarks>
            <returns>The <see cref="T:Octokit.PublicKey"/>s for the user.</returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableUsersClient.Get(System.String)">
            <summary>
            Returns the user specified by the login.
            </summary>
            <param name="login">The login name for the user</param>
        </member>
        <member name="M:Octokit.Reactive.IObservableUsersClient.Current">
            <summary>
            Returns a <see cref="T:Octokit.User"/> for the current authenticated user.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.User"/></returns>
        </member>
        <member name="M:Octokit.Reactive.IObservableUsersClient.Update(Octokit.UserUpdate)">
            <summary>
            Update the specified <see cref="T:Octokit.UserUpdate"/>.
            </summary>
            <param name="user">The login for the user</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.User"/></returns>
        </member>
        <member name="P:Octokit.Reactive.IObservableUsersClient.Followers">
             <summary>
             A client for GitHub's User Followers API
             </summary>
             <remarks>
             See the <a href="http://developer.github.com/v3/users/followers/">Followers API documentation</a> for more information.
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableUsersClient.Email">
             <summary>
             A client for GitHub's User Emails API
             </summary>
             <remarks>
             See the <a href="http://developer.github.com/v3/users/emails/">Emails API documentation</a> for more information.
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.IObservableUsersClient.Keys">
             <summary>
             A client for GitHub's User Keys API
             </summary>
             <remarks>
             See the <a href="http://developer.github.com/v3/users/keys/">Keys API documentation</a> for more information.
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.ObservableUsersClient.Get(System.String)">
            <summary>
            Returns the user specified by the login.
            </summary>
            <param name="login">The login name for the user</param>
        </member>
        <member name="M:Octokit.Reactive.ObservableUsersClient.Current">
            <summary>
            Returns a <see cref="T:Octokit.User"/> for the current authenticated user.
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.User"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableUsersClient.Update(Octokit.UserUpdate)">
            <summary>
            Update the specified <see cref="T:Octokit.UserUpdate"/>.
            </summary>
            <param name="user">The login for the user</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated.</exception>
            <returns>A <see cref="T:Octokit.User"/></returns>
        </member>
        <member name="P:Octokit.Reactive.ObservableUsersClient.Followers">
             <summary>
             A client for GitHub's User Followers API
             </summary>
             <remarks>
             See the <a href="http://developer.github.com/v3/users/followers/">Followers API documentation</a> for more information.
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableUsersClient.Email">
             <summary>
             A client for GitHub's User Emails API
             </summary>
             <remarks>
             See the <a href="http://developer.github.com/v3/users/emails/">Emails API documentation</a> for more information.
            </remarks>
        </member>
        <member name="P:Octokit.Reactive.ObservableUsersClient.Keys">
             <summary>
             A client for GitHub's User Keys API
             </summary>
             <remarks>
             See the <a href="http://developer.github.com/v3/users/keys/">Keys API documentation</a> for more information.
            </remarks>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryForksClient.#ctor(Octokit.IGitHubClient)">
            <summary>
            Initializes a new GitHub Repos Fork API client.
            </summary>
            <param name="client"></param>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryForksClient.GetAll(System.String,System.String,Octokit.RepositoryForksListRequest)">
            <summary>
            Gets the list of forks defined for a repository
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/forks/#list-forks">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableRepositoryForksClient.Create(System.String,System.String,Octokit.NewRepositoryFork)">
            <summary>
            Creates a fork for a repository. Specify organization in the fork parameter to create for an organization.
            </summary>
            <remarks>See <a href="http://developer.github.com/v3/repos/forks/#create-a-fork">API documentation</a> for more information.</remarks>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableWatchedClient.GetAllWatchers(System.String,System.String)">
            <summary>
            Retrieves all of the watchers for the passed repository
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.User"/>s watching the passed repository</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableWatchedClient.GetAllForCurrent">
            <summary>
            Retrieves all of the watched <see cref="T:Octokit.Repository"/>(ies) for the current user
            </summary>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> of <see cref="T:Octokit.Repository"/></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableWatchedClient.GetAllForUser(System.String)">
            <summary>
            Retrieves all of the <see cref="T:Octokit.Repository"/>(ies) watched by the specified user
            </summary>
            <param name="user">The login of the user</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <see cref="T:System.IObservable`1"/> watched by the specified user</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableWatchedClient.CheckWatched(System.String,System.String)">
            <summary>
            Check if a repository is watched by the current authenticated user
            </summary>
            <param name="owner">The owner of the repository</param>
            <param name="name">The name of the repository</param>
            <exception cref="T:Octokit.AuthorizationException">Thrown if the client is not authenticated</exception>
            <returns>A <c>bool</c> representing the success of the operation</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableWatchedClient.WatchRepo(System.String,System.String,Octokit.NewSubscription)">
            <summary>
            Stars a repository for the authenticated user.
            </summary>
            <param name="owner">The owner of the repository to star</param>
            <param name="name">The name of the repository to star</param>
            <param name="newSubscription">A <see cref="T:Octokit.NewSubscription"/> instance describing the new subscription to create</param>
            <returns>A <c>bool</c> representing the success of starring</returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableWatchedClient.UnwatchRepo(System.String,System.String)">
            <summary>
            Unstars a repository for the authenticated user.
            </summary>
            <param name="owner">The owner of the repository to unstar</param>
            <param name="name">The name of the repository to unstar</param>
            <returns>A <c>bool</c> representing the success of the operation</returns>
        </member>
        <member name="M:Octokit.AuthorizationExtensions.GetOrCreateApplicationAuthentication(Octokit.Reactive.IObservableAuthorizationsClient,System.String,System.String,Octokit.NewAuthorization,System.Func{Octokit.TwoFactorRequiredException,System.IObservable{Octokit.TwoFactorChallengeResult}})">
            <summary>
            This method will create a new authorization for the specified OAuth application, only if an authorization 
            for that application doesnâ€™t already exist for the user. It returns the userâ€™s token for the application
            if one exists. Otherwise, it creates a new one.
            </summary>
            <remarks>
            <para>
            This method allows the caller to provide a callback which is used to retrieve the two-factor code from
            the user. Typically the callback is used to show some user interface to the user.
            </para>
            <para>
            See <a href="http://developer.github.com/v3/oauth/#list-your-authorizations">API documentation</a> 
            for more details.
            </para>
            </remarks>
            <param name="authorizationsClient">The <see cref="T:Octokit.IAuthorizationsClient"/> this method extends</param>
            <param name="clientId">Client ID for the OAuth application that is requesting the token</param>
            <param name="clientSecret">The client secret</param>
            <param name="newAuthorization">Defines the scopes and metadata for the token</param>
            <param name="twoFactorChallengeHandler">Callback used to retrieve the two-factor authentication code
            from the user</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.AuthorizationExtensions.CreateAndDeleteExistingApplicationAuthorization(Octokit.Reactive.IObservableAuthorizationsClient,System.String,System.String,Octokit.NewAuthorization,System.Func{Octokit.TwoFactorAuthorizationException,System.IObservable{Octokit.TwoFactorChallengeResult}},System.Boolean)">
            <summary>
            This method will create a new authorization for the specified OAuth application. If an authorization 
            for that application already exists for the user and fingerprint, it'll delete the existing one and 
            recreate it.
            </summary>
            <remarks>
            <para>
            This method is typically used to initiate an application authentication flow.
            This method allows the caller to provide a callback which is used to retrieve the two-factor code from
            the user. Typically the callback is used to show some user interface to the user.
            </para>
            <para>
            See <a href="http://developer.github.com/v3/oauth/#list-your-authorizations">API documentation</a> 
            for more details.
            </para>
            </remarks>
            <param name="authorizationsClient">The <see cref="T:Octokit.IAuthorizationsClient"/> this method extends</param>
            <param name="clientId">Client ID for the OAuth application that is requesting the token</param>
            <param name="clientSecret">The client secret</param>
            <param name="newAuthorization">Defines the scopes and metadata for the token</param>
            <param name="twoFactorChallengeHandler">Callback used to retrieve the two-factor authentication code
            from the user</param>
            <param name="retryInvalidTwoFactorCode">If true, instead of completing when the two factor code supplied
            is invalid, we go through the whole cycle again and prompt the two factor dialog.</param>
            <returns></returns>
        </member>
        <member name="M:Octokit.Reactive.ObservableGitHubClient.GetLastApiInfo">
            <summary>
            Gets the latest API Info - this will be null if no API calls have been made
            </summary>
            <returns><seealso cref="T:Octokit.ApiInfo"/> representing the information returned as part of an Api call</returns>
        </member>
    </members>
</doc>
